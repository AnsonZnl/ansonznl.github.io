"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[957],{6750:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5f651df6",path:"/articles/Vue/Vue%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81.html",title:"Vue 中的验证登录状态",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue 项目中实现用户登录及 token 验证",slug:"vue-项目中实现用户登录及-token-验证",children:[]},{level:2,title:"使用 easy-mock 模拟用户数据",slug:"使用-easy-mock-模拟用户数据",children:[]},{level:2,title:"配置路由",slug:"配置路由",children:[]},{level:2,title:"导航卫士",slug:"导航卫士",children:[]},{level:2,title:"用 sessionStorage 存储用户 token",slug:"用-sessionstorage-存储用户-token",children:[]},{level:2,title:"注销",slug:"注销",children:[]},{level:2,title:"参考：",slug:"参考",children:[]}],filePathRelative:"articles/Vue/Vue中的验证登录状态.md",git:{}}},6511:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var p=a(6252);const t=(0,p.uE)('<h1 id="vue-中的验证登录状态" tabindex="-1"><a class="header-anchor" href="#vue-中的验证登录状态" aria-hidden="true">#</a> Vue 中的验证登录状态</h1><h2 id="vue-项目中实现用户登录及-token-验证" tabindex="-1"><a class="header-anchor" href="#vue-项目中实现用户登录及-token-验证" aria-hidden="true">#</a> Vue 项目中实现用户登录及 token 验证</h2><p>先说一下我的实现步骤：</p><ol><li>使用<code>easy-mock</code>新建登录接口，模拟用户数据</li><li>使用<code>axios</code>请求登录接口，匹配账号和密码</li><li>账号密码验证后， 拿到<code>token</code>，将 token 存储到<code>sessionStorage</code>中，并跳转到首页</li><li>前端每次跳转时，就使用导航守卫(vue-router.beforeEach)判断 <code>sessionStorage</code> 中有无 <code>token</code>，没有就跳转到登录页面，有则跳转到对应路由页面。</li><li>注销后，就清除<code>sessionStorage</code>里的<code>token</code>信息并跳转到登录页面</li></ol><h2 id="使用-easy-mock-模拟用户数据" tabindex="-1"><a class="header-anchor" href="#使用-easy-mock-模拟用户数据" aria-hidden="true">#</a> 使用 easy-mock 模拟用户数据</h2>',5),e=(0,p.Uk)("我用的是"),o={href:"https://easy-mock.com/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("easy-mock"),l=(0,p.Uk)(",新建了一个接口，用于模拟用户数据:"),u=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;error_code&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;usertitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;管理员&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@date(T)&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token string">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;usertitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;超级管理员&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@date(T)&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>login.vue 中写好登陆框：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>passWord<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        userName<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n        passWord<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>然后下载 axios：<code>npm install axios --save</code>,用来请求刚刚定义好的 easy-mock 接口：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://easy-mock.com/mock/5c7cd0f89d0184e94358d/museum/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          <span class="token keyword">var</span> res <span class="token operator">=</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n              len <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n              userNameArr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n              passWordArr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n              ses<span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">;</span>\n          <span class="token comment">// 拿到所有的username</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            userNameArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            passWordArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userNameArr<span class="token punctuation">,</span> passWordArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span><span class="token punctuation">(</span>userNameArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;账号不存在！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">var</span> index <span class="token operator">=</span> userNameArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>passWordArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passWord<span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token comment">// 把token放在sessionStorage中</span>\n              ses<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>userTitle <span class="token operator">=</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>usertitle<span class="token punctuation">;</span>\n              <span class="token comment">//验证成功进入首页</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startHacking</span> <span class="token punctuation">(</span><span class="token string">&#39;登录成功！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token comment">//跳转到首页</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token comment">// console.log(this.$router);</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;密码错误！&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;连接数据库失败！&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>这一步最重要的是当账号密码正确时，把请求回来的<code>token</code>放在<code>sessionStorage</code>中，</p><h2 id="配置路由" tabindex="-1"><a class="header-anchor" href="#配置路由" aria-hidden="true">#</a> 配置路由</h2><p>然后配置路由新加一个 meta 属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> login<span class="token punctuation">,</span>\n      meta<span class="token operator">:</span><span class="token punctuation">{</span>\n        needLogin<span class="token operator">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/index&#39;</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> index<span class="token punctuation">,</span>\n      meta<span class="token operator">:</span><span class="token punctuation">{</span>\n        needLogin<span class="token operator">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>判断每次路由跳转的链接是否需要登录，</p><h2 id="导航卫士" tabindex="-1"><a class="header-anchor" href="#导航卫士" aria-hidden="true">#</a> 导航卫士</h2><p>在<code>main.js</code>中配置一个全局前置钩子函数：<code>router.beforeEach（）</code>，他的作用就是在每次路由切换的时候调用 这个钩子方法会接收三个参数：to、from、next。 <code>to</code>：Route：即将要进入的目标的路由对象， <code>from</code>：Route：当前导航正要离开的路由， <code>next</code>：Function：个人理解这个方法就是函数结束后执行什么，先看官方解释 1.<code>next()</code>：进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed（确认的）， 2.<code>next(false)</code>：中断当前的导航。如果浏览器的 url 改变了（可能是用户手动或浏览器后退按钮），那么 url 地址会重置到 from 路由对应的地址。 3.<code>next(&#39;/&#39;)</code>或<code>next({path:&#39;/&#39;})</code>：跳转到一个不同的地址。当前导航被中断，进入一个新的导航。</p><h2 id="用-sessionstorage-存储用户-token" tabindex="-1"><a class="header-anchor" href="#用-sessionstorage-存储用户-token" aria-hidden="true">#</a> 用 sessionStorage 存储用户 token</h2><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>//路由守卫\nrouter.beforeEach((to, from, next)=&gt;{\n    //路由中设置的needLogin字段就在to当中\n    if(window.sessionStorage.data){\n      console.log(window.sessionStorage);\n      // console.log(to.path) //每次跳转的路径\n      if(to.path === &#39;/&#39;){\n        //登录状态下 访问login.vue页面 会跳到index.vue\n        next({path: &#39;/index&#39;});\n      }else{\n        next();\n      }\n    }else{\n      // 如果没有session ,访问任何页面。都会进入到 登录页\n      if (to.path === &#39;/&#39;) { // 如果是登录页面的话，直接next() --&gt;解决注销后的循环执行bug\n        next();\n      } else { // 否则 跳转到登录页面\n        next({ path: &#39;/&#39; });\n      }\n    }\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',14),r=(0,p.Uk)("这里用了"),i=(0,p._)("code",null,"router.beforeEach",-1),k=(0,p.Uk)(),b={href:"https://router.vuejs.org/zh/guide/advanced/",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("vue-router 导航守卫"),m=(0,p.Uk)(" 每次跳转时都会判断"),g=(0,p._)("code",null,"sessionStorage",-1),h=(0,p.Uk)("中是否有"),v=(0,p._)("code",null,"token",-1),f=(0,p.Uk)("值，如果有则能正常跳转，如果没有那么就返回登录页面。"),q=(0,p.uE)('<h2 id="注销" tabindex="-1"><a class="header-anchor" href="#注销" aria-hidden="true">#</a> 注销</h2><p>至此就完成了一个简单的登录状态了，浏览器关闭后<code>sessionStorage</code>会清空的，所以当用户关闭浏览器再打开是需要重新登录的</p><p>当然也可以手动清除<code>sessionStorage</code>，清除动作可以做成注销登录，这个就简单了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 注销后 清除session信息 ，并返回登录页</span>\n    window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>common<span class="token punctuation">.</span><span class="token function">startHacking</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;注销成功！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>写一个清除<code>sessionStorag</code>的方法。 一个简单的保存登录状态的小 Demo。</p><hr><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h2>',7),x={href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("vue-router 导航守卫"),y={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",o,[c,(0,p.Wm)(a)]),l]),u,(0,p._)("p",null,[r,i,k,(0,p._)("a",b,[d,(0,p.Wm)(a)]),m,g,h,v,f]),q,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",x,[w,(0,p.Wm)(a)])])])],64)}}}}]);