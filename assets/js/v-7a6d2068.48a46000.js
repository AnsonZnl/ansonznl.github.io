"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3910],{8753:(t,e,l)=>{l.r(e),l.d(e,{data:()=>i});const i={key:"v-7a6d2068",path:"/articles/WeApp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%92%8C%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7.html",title:"小程序性能优化和异常监控",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"运行环境",slug:"运行环境",children:[]},{level:2,title:"性能分析",slug:"性能分析",children:[]},{level:2,title:"性能优化",slug:"性能优化",children:[]},{level:2,title:"异常监控",slug:"异常监控",children:[{level:3,title:"为什么要做异常错误的监控？",slug:"为什么要做异常错误的监控",children:[]},{level:3,title:"监控方式",slug:"监控方式",children:[]}]}],filePathRelative:"articles/WeApp/小程序性能优化和异常监控.md",git:{}}},1207:(t,e,l)=>{l.r(e),l.d(e,{default:()=>r});const i=(0,l(6252).uE)('<h1 id="小程序性能优化和异常监控" tabindex="-1"><a class="header-anchor" href="#小程序性能优化和异常监控" aria-hidden="true">#</a> 小程序性能优化和异常监控</h1><h2 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境" aria-hidden="true">#</a> 运行环境</h2><p><strong>小程序运行环境</strong></p><table><thead><tr><th style="text-align:center;">运行环境</th><th style="text-align:center;">逻辑层</th><th style="text-align:center;">渲染层</th></tr></thead><tbody><tr><td style="text-align:center;">IOS</td><td style="text-align:center;">JSCore</td><td style="text-align:center;">webview</td></tr><tr><td style="text-align:center;">安卓</td><td style="text-align:center;">JSCore</td><td style="text-align:center;">X5浏览器</td></tr><tr><td style="text-align:center;">小程序开发工具</td><td style="text-align:center;">NWJS</td><td style="text-align:center;">Chrome webviwe</td></tr></tbody></table><p><strong>JS 执行环境的不同</strong></p><p>浏览器中：ES、DOM、BOM</p><p>Node中：ES、NPM、Native</p><p>小程序中：ES、小程序框架、小程序API</p><p><strong>逻辑层和渲染层</strong></p><p>JS工作在逻辑层</p><p>wxml和wxss工作在渲染层</p><p>小程序的渲染层和逻辑层分别由两个线程管理，两个线程的通信由微信客户端(Native)做中转。</p><p><strong>数据驱动</strong></p><p>通过JS对象可以渲染DOM上元素，使用JS对象描述DOM最后经过比对通过setData渲染到页面上。</p><h2 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析" aria-hidden="true">#</a> 性能分析</h2><p><strong>分析工具</strong></p><p>浏览器：Performance、Lighthouse</p><p>小程序：audit、体验评分、小程序助手[性能分析]板块、和wx.getPerformance</p><p><strong>分析指标</strong></p><p>FMP：First Meaningful Paint 首屏加载</p><p>白屏率：打开某一页面后，白屏的时间和概率</p><p>服务可用性：HTTP请求失败率，JSError小程序运行发生的错误。</p><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><p><strong>首屏加载</strong></p><ul><li>删除无用代码，减少代码体积，压缩代码，图片体积，gzip压缩。 <ul><li>webpack</li><li>gzip</li></ul></li><li>使用CSS3效果代替图片 <ul><li>图片渐变阴影等</li></ul></li><li>将重复逻辑封装，使用组件。</li><li>静态资源CDN</li><li>提前首屏数据请求 <ul><li>数据预拉取：能够在小程序冷启动时候，荣国微信后台提前向第三方服务器拉取数据。</li><li>周期性更新</li></ul></li><li>代码分包 <ul><li>不分包：小程序启动时，一次性下载所有代码</li><li>分包：小程序启动时，先下载主包，后进入其他分包，在加载分包代码</li></ul></li><li>预加载，perload与解析</li><li>图片的优化和格式选择，比如小图使用base64，大图jpg，logo使用png等，在可以使用webp的图，优先使用webp格式的图片</li><li>使用字体图标库（iconfont）代替图标</li><li>图片懒加载，数据懒加载</li><li>使用http2.0 <ul><li>多路复用</li></ul></li><li>使用骨架屏（提升体验）</li><li>非必要数据不放在首屏，加快页面渲染时间。</li></ul><p><strong>白屏率</strong></p><ul><li>减少this.setData，或者将多次的操作合并为一次，减少线程之间的通信，可以使用wx.nextTick()优化。</li><li>将不会渲染只用于逻辑判断的字段设置在page上而不是data上，（组件中可以使用_xx命名）</li><li>善用缓存 <ul><li>浏览器缓存</li><li>http缓存</li></ul></li><li>避免setInterval/setTimeout，使用之后及时clear掉</li></ul><p><strong>服务可用性</strong></p><ul><li>使用wx.onError，捕捉全局的错误，然后分类上传。浏览器中对应window.onerror</li><li>使用同一的http方法，进行网络请求，同一设置请求拦截和响应拦截，实现接口的分析和统计。</li><li>防抖和节流</li><li>减少重排和重绘</li></ul><h2 id="异常监控" tabindex="-1"><a class="header-anchor" href="#异常监控" aria-hidden="true">#</a> 异常监控</h2><h3 id="为什么要做异常错误的监控" tabindex="-1"><a class="header-anchor" href="#为什么要做异常错误的监控" aria-hidden="true">#</a> 为什么要做异常错误的监控？</h3><p>通过线上的异常监控，可以复现一些本地难以复现的bug，比如某个bug只有在特定环境下的特定机型下才能复现，通过异常监控得到bug的复现条件，然后才能更好的去解决问题。</p><h3 id="监控方式" tabindex="-1"><a class="header-anchor" href="#监控方式" aria-hidden="true">#</a> 监控方式</h3><ul><li><p>通过wx.onError监控错误异常然后分析上报。</p></li><li><p>小程序后台结合wx.reportMonitor进行自定义的异常数据上报。</p></li><li><p>通过小程序后台的监控平台查看，然后做异常报警。</p></li><li><p>通过邮件/微信群，超过异常点后进行异常推送。</p></li></ul>',34),r={render:function(t,e){return i}}}}]);