"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5056],{4110:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-217270b3",path:"/articles/Next/%E4%BD%BF%E7%94%A8Next13%E3%80%81Vercel%E3%80%81Prisma%E5%BC%80%E5%8F%91%E7%9A%84%E5%85%A8%E6%A0%88TodoList.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"开始",slug:"开始",children:[]},{level:2,title:"目录结构",slug:"目录结构",children:[]},{level:2,title:"数据库设置",slug:"数据库设置",children:[]},{level:2,title:"使用 Prisma",slug:"使用-prisma",children:[]},{level:2,title:"注册/登录",slug:"注册-登录",children:[{level:3,title:"注册",slug:"注册",children:[]},{level:3,title:"登录",slug:"登录",children:[]}]},{level:2,title:"中间件",slug:"中间件",children:[]},{level:2,title:"Todo list 功能开发",slug:"todo-list-功能开发",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"articles/Next/使用Next13、Vercel、Prisma开发的全栈TodoList.md",git:{}}},976:(n,s,a)=>{a.r(s),a.d(s,{default:()=>L});var p=a(6252);const t=(0,p._)("h2",{id:"前言",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),(0,p.Uk)(" 前言")],-1),e={href:"https://link.juejin.cn/?target=https%3A%2F%2Fnextjs.org%2F",title:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Next.js"),c=(0,p.Uk)("是一个使用 React 作为前端框架底层的支持 SSR(请求时渲染)、SSG(构建时渲染)等技术的全栈框架，可用于构建各种各样的 Web 应用程序，从小型个人项目到大型企业应用程序。"),l=(0,p._)("p",null,"搭配 Github & Vercel 使用可以支持整套构建部署流程。",-1),u=(0,p._)("p",null,"同时在服务端也非常容易做缓存相关的处理，甚至是做一些中间件的开发，简直是前端开发的神兵利器。",-1),r=(0,p._)("p",null,"本文将使用以下技术栈开发一个 todo list 应用。",-1),i={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("React"),d=(0,p.Uk)(": 用于构建用户界面的流行 JavaScript 库。"),b={href:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("Next.js"),g=(0,p.Uk)(": 用于构建服务器呈现的 React 应用程序的强大框架。"),w={href:"https://next-auth.js.org/",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("Next-Auth"),y=(0,p.Uk)(": 用于 Next.js 应用程序的简单且灵活的认证库。"),h={href:"https://prisma.yoga/",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("Prisma"),x=(0,p.Uk)(" 是一个现代化的数据库工具和 ORM（对象关系映射）库，"),v={href:"https://vercel.com/postgres",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("Vercel Postgres"),N=(0,p.Uk)(": Vercel 提供的可靠且可扩展的托管数据库解决方案。"),R=(0,p._)("h2",{id:"开始",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#开始","aria-hidden":"true"},"#"),(0,p.Uk)(" 开始")],-1),S=(0,p._)("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46e784b22b464918ab7fdd8053d3057d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1274&h=664&s=103239&e=png&b=fcfcfc",alt:"image.png"},null,-1),P=(0,p.Uk)(" 此项目使用的是 "),T={href:"https://vercel.com/new/znl-github/templates/next.js/prisma-postgres-auth-starter",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("prisma-postgres-auth-starter"),U=(0,p.Uk)(" 模版基础上开发的 ，进入项目后点击 Deplay，可以先把这个项目部署在自己的 Vercel 里，并且会自动同步到我们的 GitHub 仓库，下载仓库到本地即可运行项目。"),I=(0,p.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pnpm\npnpm run dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动项目后浏览器打开即可进入首页，一般地址是：http://localhost:3000/</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fd8196b0e744136b84781daadca982b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1080&amp;h=639&amp;s=51849&amp;e=png&amp;b=000000" alt="image.png"> 点击 <code>Protected Page</code> 可进入登陆页，登录成功后可以进入内页，我们就是在这里开发的 todo list 功能。</p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>项目的启动后，稍微了解一下目录结构：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c87470f5d5b4b43a389632235feb573~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=367&amp;h=785&amp;s=54599&amp;e=png&amp;b=181818" alt="image.png"></p><ul><li><code>.next</code>目录：这是 Next.js 的缓存目录，在执行<code>dev</code>或<code>build</code>等命令时，会在项目的根目录下生成。它主要用于缓存已生成的内容，以提高编译速度，通常无需开发者干预。</li><li><code>.vercel</code>目录：Vercel 配置文件</li><li><code>.vscode</code>目录：这是 Visual Studio Code 编辑器的配置目录，包含与项目的编辑器设置相关的文件。</li><li><code>node_modules</code>目录：这是存放第三方依赖的目录，通常无需详细介绍，因为它由<code>npm</code>或<code>yarn</code>自动管理。</li><li><code>public</code>目录：主要用于存放静态资源文件，默认情况下没有二级目录，但您可以根据需要在其中创建子目录以组织相关资源。这些资源可以通过类似<code>/favicon.ico</code>的路径引用。</li><li><code>src</code>目录：这是项目的主要源代码目录，初始结构包括<code>app</code>目录，其中还包含一个默认的<code>api</code>子目录，用于存放 Next.js 提供的服务器端 API 路由。</li><li><code>prisma</code>目录：用于存放与数据库集合和类型相关的 Prisma 文件。</li><li><code>components</code>目录：包含项目中使用到的公共组件。</li><li><code>lib</code>目录：存放第三方库或模块。</li><li><code>utils</code>目录：包含项目中使用的工具库或辅助函数。</li><li><code>types</code>目录：用于存放 TypeScript 类型定义文件。</li><li><code>styles</code>目录：存放与样式相关的文件，可能包括 CSS、SCSS 或其他样式表。</li><li><code>.eslintrc.json</code>：包含 ESLint 的规则配置，用于项目的代码质量和风格检查。</li><li><code>.gitignore</code>：包含 Git 版本控制系统的忽略文件规则，用于排除不需要跟踪的文件或目录。</li><li><code>next-env.d.ts</code>：包含与 Next.js 相关的 TypeScript 类型定义，默认情况下只包含默认引用。</li><li><code>next.config.js</code>：包含 Next.js 的配置选项，可用于自定义应用程序行为。</li><li><code>package.json</code>：包含项目的 npm 相关配置，包括依赖项列表、脚本命令和其他项目信息。</li><li><code>README.md</code>：项目的文档说明文件，通常包含有关项目的描述、安装说明和用法示例。</li><li><code>tsconfig.json</code>：包含 TypeScript 相关配置，用于自定义项目中的 TypeScript 行为。</li></ul><h2 id="数据库设置" tabindex="-1"><a class="header-anchor" href="#数据库设置" aria-hidden="true">#</a> 数据库设置</h2><p>我们使用的数据库是 Vercel 的 PostgresSQL，它对每个用户都有一定的免费的额度，自己练习是足够的。</p><p>进入到我们初始化完成的项目，在右上角一个数据库选项卡，我们的项目会自动绑定一个数据库，具体的位置如图：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c882c43da414b35b486e787b5ec62f6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1568&amp;h=523&amp;s=69374&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>按照文档快速的步骤将本地项目和 Vercel PostgresSql 进行连接，在图中的 Data 选项里话可以查看数据和输入 SQL 命令操作数据，非常方便。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abe06792ee3b4f39b9bb508a45dccf06~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1476&amp;h=750&amp;s=113700&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>按照文档中的步骤一步步操作，即可连接数据库成功，具体怎么验证呢？我们在本地进入注册页面，注册一个账号然后在数据库里进行查看，如果能查看到就说明连接成功了（图片 Data 里），反之异常。</p><h2 id="使用-prisma" tabindex="-1"><a class="header-anchor" href="#使用-prisma" aria-hidden="true">#</a> 使用 Prisma</h2><p>Prisma 是一种现代数据库工具和对象关系映射（ORM）框架，它用于简化数据库访问和数据操作的过程。Prisma 提供了强大的工具，使开发人员能够以类型安全、高效和可维护的方式与数据库进行交互。</p><p><strong>Prisma Schema 定义</strong>：首先，您需要定义您的数据库模型和架构。这通常在 Prisma Schema 文件中进行。Prisma Schema 定义了数据库表、字段、关联关系以及数据模型的结构。这个定义是关于数据库的抽象，Prisma 使用它来生成实际的数据库表和与之相关的 Prisma Client 代码。</p><p>Schema 在项目的<code>prisma/schema.prisma</code>里，可以使用非常简洁的语法描述数据模型的结构和关系，我们在这里写了<code>User</code>、<code>TodoList</code>两个 model。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// This is your Prisma schema file,</span>\n<span class="token comment">// learn more about it in the docs: https://pris.ly/d/prisma-schema</span>\n\ngenerator client <span class="token punctuation">{</span>\n  provider        <span class="token operator">=</span> <span class="token string">&quot;prisma-client-js&quot;</span>\n  previewFeatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;jsonProtocol&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\ndatasource db <span class="token punctuation">{</span>\n  provider          <span class="token operator">=</span> <span class="token string">&quot;postgresql&quot;</span>\n  url               <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&quot;POSTGRES_PRISMA_URL&quot;</span><span class="token punctuation">)</span> <span class="token comment">// uses connection pooling</span>\n  directUrl         <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&quot;POSTGRES_URL_NON_POOLING&quot;</span><span class="token punctuation">)</span> <span class="token comment">// uses a direct connection</span>\n  shadowDatabaseUrl <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&quot;POSTGRES_URL_NON_POOLING&quot;</span><span class="token punctuation">)</span> <span class="token comment">// used for migrations</span>\n<span class="token punctuation">}</span>\n\nmodel User <span class="token punctuation">{</span>\n  id       Int        @id @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">autoincrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  email    String     @unique\n  password String\n  TodoList TodoList<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\nmodel TodoList <span class="token punctuation">{</span>\n  id       Int     @id @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">autoincrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  userId   Int\n  user     User    @<span class="token function">relation</span><span class="token punctuation">(</span>fields<span class="token operator">:</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">,</span> references<span class="token operator">:</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  content  String\n  complete Boolean @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>如果你足够心细，就可以在<code>package.json</code>里的<code>dev</code>命令中有一个<code>prisma generate</code>，在项目启动时，会生成 Prisma Client 代码，</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfb6853ad8d348609d3f7dd1988fa741~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=617&amp;h=265&amp;s=46696&amp;e=png&amp;b=202020" alt="image.png"></p><p><strong>自动生成 SQL 查询</strong>：Prisma Client 会根据您的查询构建 SQL 查询语句，并将其发送到数据库服务器。这样，您可以使用高级查询功能而无需手动编写 SQL 查询。</p><p>使用的方法也很简单：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&quot;@/lib/prisma&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">GET</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token operator">:</span> NextRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token operator">?.</span>todoList<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> complete<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这段代码的主要作用是处理 GET 请求，然后查询数据库中<code>userId</code>为 <code>1</code> 的用户已完成的待办项目，并返回。</p><h2 id="注册-登录" tabindex="-1"><a class="header-anchor" href="#注册-登录" aria-hidden="true">#</a> 注册/登录</h2><p>注册和登录页面都在<code>app</code>目录下，他们共同引用了一个<code>components/form</code>组件：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> signIn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next-auth/react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LoadingDots <span class="token keyword">from</span> <span class="token string">&quot;@/components/loading-dots&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> toast <span class="token keyword">from</span> <span class="token string">&quot;react-hot-toast&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&quot;next/link&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/navigation&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Iuser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;types&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Form</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;login&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;register&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 登录逻辑</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token operator">:</span> Iuser</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">signIn</span><span class="token punctuation">(</span><span class="token string">&quot;credentials&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      redirect<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      email<span class="token punctuation">,</span>\n      password<span class="token punctuation">,</span>\n      <span class="token comment">// @ts-ignore</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> error <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        router<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/protected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 注册逻辑</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token operator">:</span> Iuser</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/auth/register&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      method<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>\n      headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;Account created! Redirecting to login...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>form\n      onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>email<span class="token punctuation">.</span>value<span class="token punctuation">,</span> password<span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>email<span class="token punctuation">.</span>value<span class="token punctuation">,</span> password<span class="token operator">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      className<span class="token operator">=</span><span class="token string">&quot;flex flex-col space-y-4 bg-gray-50 px-4 py-8 sm:px-16&quot;</span>\n    <span class="token operator">&gt;</span>\n      <span class="token comment">// 表单逻辑 省略</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>通过代码我们可以看到注册逻辑请求的接口是<code>/api/auth/register</code>，登录逻辑是调用的方法<code>signIn(&quot;credentials&quot;)</code>，我们一个个来看。</p><h3 id="注册" tabindex="-1"><a class="header-anchor" href="#注册" aria-hidden="true">#</a> 注册</h3><p>注册接口的逻辑在<code>app/api/auth/register/route.ts</code>中：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&quot;@/lib/prisma&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> hash <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;bcrypt&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> exists <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    where<span class="token operator">:</span> <span class="token punctuation">{</span>\n      email<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token string">&quot;User already exists&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      data<span class="token operator">:</span> <span class="token punctuation">{</span>\n        email<span class="token punctuation">,</span>\n        password<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">hash</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在<code>app/api</code>下的文件夹就是请求路径，然后<code>route.ts</code>就是对应路径的处理方法，可以导出以请求方法名字为函数名的函数，如<code>export const POST = ()=&gt;{...}</code>就是<code>api/auth/register</code>请求路径的 post 请求的处理逻辑。</p><p>在这个逻辑里，我们首先查询的了<code>email</code>字段是否存在，如果存在则响应 400。如果不存在则创建一个用户数据并返回当前用户信息。</p><p>这里的使用<code>prisma.user.create</code>方法可以非常方便的对数据库进行 CURD 操作。</p><h3 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h3><p>登录的逻辑比较复杂一点，他是使用的 NextAuth.js 这个库进行的校验，<code>signIn(&quot;credentials&quot;)</code> 是 NextAuth.js 提供的一个方法，用于实现基于用户名和密码的用户身份验证。</p><p>当调用 <code>signIn(&quot;credentials&quot;)</code> 时，它会验证用户提供的用户名和密码是否与存储在数据库或其他身份验证源中的凭证匹配。如果匹配成功，用户将被授权登录。</p><p>逻辑处理在<code>app/api/auth/[...nextauth]/route.ts</code>文件内, <code>...nextauth</code>是一个特殊的文件夹，他是 NextAuth 指定处理授权的地方。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> NextAuth<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token class-name">NextAuthOptions</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next-auth&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CredentialsProvider <span class="token keyword">from</span> <span class="token string">&quot;next-auth/providers/credentials&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&quot;@/lib/prisma&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> compare <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;bcrypt&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> authOptions<span class="token operator">:</span> NextAuthOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">CredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      credentials<span class="token operator">:</span> <span class="token punctuation">{</span>\n        email<span class="token operator">:</span> <span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&quot;Email&quot;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&quot;email&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        password<span class="token operator">:</span> <span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&quot;Password&quot;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&quot;password&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token keyword">async</span> <span class="token function">authorize</span><span class="token punctuation">(</span>credentials<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> credentials <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>email <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Missing username or password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          where<span class="token operator">:</span> <span class="token punctuation">{</span>\n            email<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// if user doesn&#39;t exist or password doesn&#39;t match</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid username or password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">NextAuth</span><span class="token punctuation">(</span>authOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token keyword">as</span> <span class="token constant">GET</span><span class="token punctuation">,</span> handler <span class="token keyword">as</span> <span class="token constant">POST</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>具体的步骤是：</p><ol><li>用户在应用程序的登录页面输入其用户名和密码。</li><li>应用程序将用户名和密码作为 <code>credentials</code> 对象传递给 <code>signIn(&quot;credentials&quot;)</code> 方法。</li><li>NextAuth.js 将这些凭据与数据库或其他身份验证源中的用户信息进行比对。</li><li>如果凭据匹配成功，用户会被授权登录，并将得到一个身份验证的会话。</li><li>用户会被重定向到登录后的页面。</li></ol><p>这个方法的目的是实现基本的用户名和密码验证，但您也可以通过自定义身份验证提供程序来实现其他身份验证方式，比如社交媒体登录或其他身份验证流程。</p><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h2><p>因为 Todo list 功能需要登录之后才能使用，如果未登录的用户进入，则应该跳转至登录页。这块的处理逻辑应该是作用于全局的。所幸，Next.js 提供了<code>Middleware</code>，使用过 Express、Koa 的同学应该熟悉，它是用于处理请求和响应的中间层函数，它允许您在处理请求之前或之后执行额外的逻辑。</p><p>在项目中对应的文件是<code>middleware.ts</code>，可以在这里编写逻辑。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next-auth/jwt&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Get the pathname of the request (e.g. /, /protected)</span>\n  <span class="token keyword">const</span> path <span class="token operator">=</span> req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n\n  <span class="token comment">// If it&#39;s the root path, just render it</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    req<span class="token punctuation">,</span>\n    secret<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEXTAUTH_SECRET</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>session <span class="token operator">&amp;&amp;</span> path <span class="token operator">===</span> <span class="token string">&quot;/protected&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&quot;/login&quot;</span> <span class="token operator">||</span> path <span class="token operator">===</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;/protected&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>首先通过<code>middleware</code>函数里拿到请求对象，然后判断请求路径是否是需要的登录的，如果是在验证登录状态（使用 next-auth），然后做出对应的处理逻辑。</p><ul><li>登录 <ul><li>进入首页正常</li><li>进入 todo list 正常</li><li>进入登陆、注册页跳转 todo list</li></ul></li><li>未登录 <ul><li>进入首页正常</li><li>进入登录、注册正常</li><li>进入 todo list 跳转登录页</li></ul></li></ul><h2 id="todo-list-功能开发" tabindex="-1"><a class="header-anchor" href="#todo-list-功能开发" aria-hidden="true">#</a> Todo list 功能开发</h2><p>这个功能在<code>app/protected</code>里开发，页面的代码就不贴出来了，就是一个简单的表单和一列待办列表。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dff329188d3d49e8a135f13a7f980ea6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=444&amp;h=326&amp;s=15677&amp;e=png&amp;b=000000" alt="image.png"></p><p>重点看一下这块的接口是如何实现的吧，我使用的是 REST API 的方式编写的，代码地址在<code>app/api/todo/route.ts</code>。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&quot;@/lib/prisma&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ItodoItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;types&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 查询todo</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">GET</span><span class="token punctuation">(</span>request<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> searchParams <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> userId <span class="token operator">=</span> searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> todos<span class="token operator">:</span> ItodoItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token operator">?.</span>todoList<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加todo</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>todoList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    where<span class="token operator">:</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">&quot;The number of todos exceeds five&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>todoList<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> userId <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 删除todo</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">DELETE</span><span class="token punctuation">(</span>request<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token operator">?.</span>todoList<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 修改todo</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">PUT</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> complete <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>todoList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    where<span class="token operator">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span> complete <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>实现很简单，因为免费额度的原因，所以限制了每个用户只允许添加 5 条待办。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过这次使用 Next.js，非常方便的就能实现了一个登录、注册、CURD，配合 Vercel 还支持自动部署、日志查看、数据库存储.. 开发流程很舒服。</p><p>感觉以后通过这种方式写一个简单的全栈项目是很不错的～</p><p>最后附上 GitHub 地址：https://github.com/AnsonZnl/react-nextjs-todolist ，如果对您有帮助，欢迎 🌟Star🌟</p>',59),L={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)]),c]),l,u,r,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",i,[k,(0,p.Wm)(a)]),d]),(0,p._)("li",null,[(0,p._)("a",b,[m,(0,p.Wm)(a)]),g]),(0,p._)("li",null,[(0,p._)("a",w,[f,(0,p.Wm)(a)]),y]),(0,p._)("li",null,[(0,p._)("a",h,[q,(0,p.Wm)(a)]),x]),(0,p._)("li",null,[(0,p._)("a",v,[j,(0,p.Wm)(a)]),N])]),R,(0,p._)("p",null,[S,P,(0,p._)("a",T,[_,(0,p.Wm)(a)]),U]),I],64)}}}}]);