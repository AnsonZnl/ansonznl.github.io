"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1932],{3422:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-04080857",path:"/articles/Engineering/%E5%B8%B8%E7%94%A8%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7(Webpack%E3%80%81Vite%E3%80%81Rollup)%E8%AF%A6%E8%A7%A3.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Webpack",slug:"webpack",children:[{level:3,title:"loader",slug:"loader",children:[]},{level:3,title:"参考：",slug:"参考",children:[]}]},{level:2,title:"Rollup",slug:"rollup",children:[{level:3,title:"Rollup 和 Webpack 的区别",slug:"rollup-和-webpack-的区别",children:[]},{level:3,title:"Rollup 常用的插件",slug:"rollup-常用的插件",children:[]},{level:3,title:"总结",slug:"总结",children:[]}]},{level:2,title:"Vite",slug:"vite",children:[{level:3,title:"总结",slug:"总结-1",children:[]},{level:3,title:"参考",slug:"参考-1",children:[]}]},{level:2,title:"总结",slug:"总结-2",children:[]}],filePathRelative:"articles/Engineering/常用构建工具(Webpack、Vite、Rollup)详解.md",git:{}}},1410:(n,a,s)=>{s.r(a),s.d(a,{default:()=>vn});var e=s(6252);const l=(0,e.uE)("<p>构建工具就是指能自动对代码执行检验、转换、压缩等功能的工具。从目前市场上流行的构建工具来看，常见的功能有：</p><ul><li>模块化方案，对不同模块的代码进行兼容整合。</li><li>代码转换，例如将 es6/es7、ts 等高级语法转换为 js 文件，将 less、sass 转换为 css。</li><li>线上质量，不同浏览器和浏览器多版本的兼容。</li><li>开发效率，项目的冷启动和二次启动的时间，热更新的时间影响开发效率。</li><li>代码打包，将有关联的代码打包在一起。</li><li>代码压缩、文件压缩、gzip 压缩等。</li><li>热加载，修改代码后自动刷新页面。</li><li>代码检验，检查代码格式是否符合规范 ...</li></ul><p>在开发中使用构建工具，能够大大的提升了开发效率。</p>",3),p=(0,e.Uk)("由于前端构建工具比较多，所以本章选取了其中的三个 "),o={href:"https://webpack.docschina.org/concepts/",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("Webpack"),c=(0,e.Uk)("、"),r={href:"https://www.rollupjs.com/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("Rollup"),u=(0,e.Uk)("、"),k={href:"https://github.com/vitejs/vite",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Vite"),b=(0,e.Uk)(" 来进行讲解。"),g=(0,e._)("h2",{id:"webpack",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#webpack","aria-hidden":"true"},"#"),(0,e.Uk)(" Webpack")],-1),h={href:"https://webpack.docschina.org/",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("Webpack"),_=(0,e.Uk)(" 是目前最火的构建工具，它具有非常多的实用功能："),w=(0,e._)("li",null,"热加载：开发环境下修改代码，页面实时刷新。",-1),f=(0,e._)("li",null,"按需加载：每次打开页面时，只加载当前页面所需要的资源。在切换到其他页面时，再加载对应的资源。",-1),v=(0,e._)("li",null,"代码打包：打包、压缩、分割代码等等。",-1),W={href:"https://webpack.docschina.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("tree-shaking"),U=(0,e.Uk)("：打包过程中自动剔除没有使用的代码。"),j=(0,e._)("li",null,"可以通过 loader 和 plugin 处理各种各样的资源依赖。",-1),S=(0,e.Uk)("下面让我们简单的了解一下 "),E={href:"https://www.webpackjs.com/",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("Webpack"),R=(0,e.Uk)(" 的 loader[https://webpack.docschina.org/concepts/loaders/]、 plugin[https://webpack.docschina.org/concepts/plugins/]和自定义模块加载系统。"),V=(0,e.uE)('<h3 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> loader</h3><p>loader 用于对模块的代码转换，如将 Typescript 转为 Javascript、将 less、sass 转为 css、将.vue、.tsx 等文件转为 js、css 等。</p><p><strong>loader 特性</strong></p><ul><li>loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。</li><li>loader 可以是同步的，也可以是异步的。</li><li>loader 运行在 Node.js 中，并且能够执行任何操作。</li><li>loader 可以通过 <code>options</code> 对象配置（仍然支持使用 <code>query</code> 参数来设置选项，但是这种方式已被废弃）。</li><li>除了常见的通过 <code>package.json</code> 的 <code>main</code> 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 <code>loader</code> 字段直接引用一个模块。</li><li>插件(plugin)可以为 loader 带来更多特性。</li><li>loader 能够产生额外的任意文件。</li></ul>',4),y=(0,e.Uk)("可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）和 "),P={href:"https://webpack.docschina.org/loaders",target:"_blank",rel:"noopener noreferrer"},M=(0,e.Uk)("更多其他特性"),B=(0,e.Uk)("。"),J=(0,e._)("strong",null,"plugin",-1),H={href:"https://webpack.docschina.org/plugins/",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("plugin"),L=(0,e.Uk)(" 目的在于解决 loader 无法实现的其他事，"),A=(0,e.uE)("<p>常用的 plugin 有：</p><ul><li><code>define-plugin</code>：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li><li><code>ignore-plugin</code>：忽略部分文件</li><li><code>html-webpack-plugin</code>：简化 HTML 文件创建 (依赖于 html-loader)</li><li><code>web-webpack-plugin</code>：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li><li><code>uglifyjs-webpack-plugin</code>：不支持 ES6 压缩 (Webpack4 以前)</li><li><code>terser-webpack-plugin</code>: 支持压缩 ES6 (Webpack4)</li><li><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li><li><code>mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代 extract-text-webpack-plugin)</li><li><code>serviceworker-webpack-plugin</code>：为网页应用增加离线缓存功能</li><li><code>clean-webpack-plugin</code>: 目录清理</li><li><code>ModuleConcatenationPlugin</code>: 开启 Scope Hoisting</li><li><code>speed-measure-webpack-plugin</code>: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li><li><code>webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li></ul><p><strong>Loader 和 Plugin 的区别</strong></p>",3),C=(0,e._)("code",null,"Loader",-1),O=(0,e.Uk)(" 模块导出一个运行在 Node 上的 JavaScript 函数。该函数对接受的内容进行转换，返回转换后的结果。因为 webpack 只认识 JS，所以 loader 相当于它的翻译官，对资源做转译的预处理工作。 -可以尝试"),N={href:"https://webpack.docschina.org/contribute/writing-a-loader/",target:"_blank",rel:"noopener noreferrer"},z=(0,e.Uk)("编写一个 laoder"),D=(0,e.Uk)("以理解它是如何运行的。"),$=(0,e.uE)('<p><code>Loader</code> 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">&quot;ts-loader&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>Plugin</code>是一个基于事件流的插件，它是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在整个编译生命周期都可以访问 compiler 对象。</p><p><code>ConsoleLogOnBuildWebpackPlugin.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">&quot;ConsoleLogOnBuildWebpackPlugin&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConsoleLogOnBuildWebpackPlugin</span> <span class="token punctuation">{</span>\n    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>webpack<span class="token punctuation">}</span> <span class="token operator">=</span> compiler<span class="token punctuation">;</span>\n        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;webpack 构建正在启动！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> ConsoleLogOnBuildWebpackPlugin<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',5),G=(0,e._)("code",null,"Plugin",-1),I=(0,e.Uk)(" 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。 有兴趣的可以"),K={href:"https://webpack.docschina.org/contribute/writing-a-plugin/#creating-a-plugin",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("编写一个 Plugin"),F=(0,e.uE)('<p><code>webpack.config.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问内置的插件</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    entry<span class="token operator">:</span> <span class="token string">&quot;./path/to/my/entry/file.js&quot;</span><span class="token punctuation">,</span>\n    output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        filename<span class="token operator">:</span> <span class="token string">&quot;my-first-webpack.bundle.js&quot;</span><span class="token punctuation">,</span>\n        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    module<span class="token operator">:</span> <span class="token punctuation">{</span>\n        rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n                loader<span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h3>',3),Q={href:"https://juejin.cn/post/6844904094281236487",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Uk)("「吐血整理」再来一打 Webpack 面试题"),Y={href:"https://mp.weixin.qq.com/s/o8B8HAczZtIZM8V_HHwNqg",target:"_blank",rel:"noopener noreferrer"},nn=(0,e.Uk)("前端构建工具进化历程"),an=(0,e.uE)('<h2 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup" aria-hidden="true">#</a> Rollup</h2><blockquote><p>Rollup 是一个 JavaScript 的模块化打包工具，可以帮助我们编译小的代码到一个大的、复杂的代码中，比如一个库或者一个应用程序。</p></blockquote><h3 id="rollup-和-webpack-的区别" tabindex="-1"><a class="header-anchor" href="#rollup-和-webpack-的区别" aria-hidden="true">#</a> Rollup 和 Webpack 的区别</h3><ul><li>Webpack 适合构建大型项目开发（Vue、React），而 Rollup 适合构建类库的开发（Vue、React、Vite 源码都是基于它构建的）</li><li>Rollup 是一个 ES Module 打包工具，如果打包 CommonJS 等需要插件支持</li><li>Rollup 对比 Webpack 它的配置更简单、友好</li><li>Rollup 基于 ES Module 所带来的 Tree Shaking 的友好支持</li><li>Rollup 是一个更纯粹的专注于 Javascript 的打包工具（当然也可以处理 CSS、Vue 等需要安装插件）</li><li>Rollup 中不支持 HMR（热替换），因为模块最终被打包到一个函数中</li></ul><h3 id="rollup-常用的插件" tabindex="-1"><a class="header-anchor" href="#rollup-常用的插件" aria-hidden="true">#</a> Rollup 常用的插件</h3><ul><li><code>@rollup/plugin-node-resolve</code>——支持导入外部模块</li><li><code>@rollup/plugin-commonjs</code>——支持导入 CommonJS</li><li><code>@rollup/plugin-babel @babel/core @babel/preset-env</code>——支持 JS 最新语法、兼容</li><li><code>@rollup/plugin-terser</code>—— 代码压缩</li><li><code>rollup-plugin-vue @vue/compiler-sfc</code>——处理 Vue 文件</li></ul>',6),sn=(0,e.Uk)("在"),en={href:"https://github.com/rollup/awesome",target:"_blank",rel:"noopener noreferrer"},ln=(0,e.Uk)("这里"),pn=(0,e.Uk)("可以找到很多优秀的 Rollup 插件"),on=(0,e.uE)('<h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><strong>Rollup 优势:</strong></p><ul><li>输出结果更加扁平(执行效率更高)</li><li>自动移除未引用的代码(Tree Shaking)</li><li>打包结果依然完全可读(和手写代码一致)</li></ul><p><strong>Rollup 缺点:</strong></p><ul><li>加载非 ESM 的第三方模块比较复杂(需要配置一大堆插件)</li><li>模块最终都被打包到一个函数中，无法实现 HMR</li><li>浏览器环境中，代码拆分功能依赖 AMD 库</li></ul><p><strong>选用:</strong></p><ul><li>开发应用程序 选用 Webpack，大而全</li><li>开发框架或类库 选用 Rollup，小而美</li></ul><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h2><p>Vite 相比于 Webpack 而言，没有打包的过程，而是直接启动了一个开发服务器 devServer。Vite 劫持浏览器的 HTTP 请求，在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器(整个过程没有对文件进行打包编译)。所以编译速度很快。</p><p>Vite 底层使用 Esbuild 实现对.<code>ts、jsx、.</code>js 代码文件的转化，所以先看下什么是 es-build。 Esbuild 是一个 JavaScript`` Bundler 打包和压缩工具，它提供了与 Webpack、Rollup 等工具相似的资源打包能力。可以将 JavaScript 和 TypeScript 代码打包分发在网页上运行。但其打包速度却是其他工具的 10 ～ 100 倍。</p>',10),tn=(0,e.Uk)("生产阶段使用"),cn={href:"https://www.rollupjs.com/",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("Rollup"),un=(0,e.Uk)("打包。"),kn=(0,e.uE)('<p>Vite 其核心原理是利用浏览器现在已经支持 ES6 的 import,碰见 import 就会发送一个 HTTP 请求去加载文件，Vite 启动一个 koa 服务器拦截这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再以 ESM 格式返回返回给浏览器。Vite 整个过程中没有对文件进行打包编译，做到了真正的按需加载，所以其运行速度比原始的 webpack 开发编译速度快出许多！</p><p><strong>首次加载流程：</strong></p><ol><li>下载一个 Vite 并启动服务，链接 WebSocket</li><li>打开浏览器会请求到.vue、.ts、.less 等非浏览器可以解析的文件</li><li>服务器接收到这些请求，会将这些.vue 等文件转换 ESM 的 JS 然后响应给浏览器</li><li>浏览器接受到这些文件后，因为是 ESM 所以有需要加载的回去加载一次（浏览器缓存有则直接取缓存）</li></ol><p><strong>非首次加载</strong></p><ol><li>在编辑器修改了一个 xx.vue 文件，vite 服务监听到当前文件的变动</li><li>webSocket 会讲变动的文件和变动的时间戳推送给浏览器</li><li>浏览器拿到这变动的文件和变动的时间吹去请求，然后执行首次加载的 3 和 4，在相应一个编译之后的 js 文件。</li></ol><p><img src="https://s2.loli.net/2023/03/07/AMJOBaXDTKG6csV.png" alt="vite 热更新流程.png"></p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>最后总结下<code>Vite</code>相关的优缺点：</p><ul><li><p>优点：</p><ul><li>快速的冷启动: 采用<code>No Bundle</code>和<code>esbuild</code>预构建，速度远快于<code>Webpack</code></li><li>高效的热更新：基于<code>ESM</code>实现，同时利用<code>HTTP</code>头来加速整个页面的重新加载，增加缓存策略</li><li>真正的按需加载: 基于浏览器<code>ESM</code>的支持，实现真正的按需加载</li></ul></li><li><p>缺点</p><ul><li>生态：目前<code>Vite</code>的生态不如<code>Webapck</code>，不过我觉得生态也只是时间上的问题。</li><li>生产环境由于<code>esbuild</code>对<code>css</code>和代码分割不友好使用<code>Rollup</code>进行打包</li></ul></li></ul><p><code>Vite.js</code>虽然才在构建打包场景兴起，但在很多场景下基本都会优于现有的解决方案。如果有生态、想要丰富的<code>loader</code>、<code>plugins</code>的要求可以考虑成熟的<code>Webpack</code>。在其余情况下，<code>Vite.js</code>不失为一个打包构建工具的好选择。</p><h3 id="参考-1" tabindex="-1"><a class="header-anchor" href="#参考-1" aria-hidden="true">#</a> 参考</h3>',11),dn={href:"https://juejin.cn/post/7064853960636989454#heading-6",target:"_blank",rel:"noopener noreferrer"},bn=(0,e.Uk)("深入理解 Vite 核心原理"),gn={href:"https://zhuanlan.zhihu.com/p/424842555",target:"_blank",rel:"noopener noreferrer"},hn=(0,e.Uk)("Vite 介绍及实现原理<超详细、纯干货！>"),mn={href:"https://juejin.cn/post/7026285200766140453",target:"_blank",rel:"noopener noreferrer"},_n=(0,e.Uk)("深入浅出 vite（核心原理 + 手撕 mini-vite）"),wn=(0,e._)("h2",{id:"总结-2",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#总结-2","aria-hidden":"true"},"#"),(0,e.Uk)(" 总结")],-1),fn=(0,e._)("ul",null,[(0,e._)("li",null,"webpack：大而全，但是对于大型项目开发过于笨重。"),(0,e._)("li",null,"rollup：适合作用于类库开发"),(0,e._)("li",null,[(0,e.Uk)("Vite: 快、小，但是浏览器支持不足，面向未来的工具。 "),(0,e._)("img",{src:"https://s2.loli.net/2023/03/07/QoDAifO1aGdKhyI.png",alt:"image.png"})])],-1),vn={render:function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("p",null,[p,(0,e._)("a",o,[t,(0,e.Wm)(s)]),c,(0,e._)("a",r,[i,(0,e.Wm)(s)]),u,(0,e._)("a",k,[d,(0,e.Wm)(s)]),b]),g,(0,e._)("p",null,[(0,e._)("a",h,[m,(0,e.Wm)(s)]),_]),(0,e._)("ul",null,[w,f,v,(0,e._)("li",null,[(0,e._)("a",W,[x,(0,e.Wm)(s)]),U]),j]),(0,e._)("p",null,[S,(0,e._)("a",E,[q,(0,e.Wm)(s)]),R]),V,(0,e._)("p",null,[y,(0,e._)("a",P,[M,(0,e.Wm)(s)]),B]),(0,e._)("p",null,[J,(0,e._)("a",H,[T,(0,e.Wm)(s)]),L]),A,(0,e._)("p",null,[C,O,(0,e._)("a",N,[z,(0,e.Wm)(s)]),D]),$,(0,e._)("p",null,[G,I,(0,e._)("a",K,[Z,(0,e.Wm)(s)])]),F,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Q,[X,(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Y,[nn,(0,e.Wm)(s)])])]),an,(0,e._)("p",null,[sn,(0,e._)("a",en,[ln,(0,e.Wm)(s)]),pn]),on,(0,e._)("p",null,[tn,(0,e._)("a",cn,[rn,(0,e.Wm)(s)]),un]),kn,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",dn,[bn,(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",gn,[hn,(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",mn,[_n,(0,e.Wm)(s)])])]),wn,fn],64)}}}}]);