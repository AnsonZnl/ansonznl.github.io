"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94],{1464:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3880b7a2",path:"/articles/Node/koa%E7%B3%BB%E7%BB%9F%EF%BC%883%EF%BC%89-%E5%8E%9F%E7%94%9Fkoa%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8.html",title:"原生koa2实现静态资源服务器",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"前言",slug:"前言",children:[]},{level:2,title:"原生koa2 静态资源服务器例子",slug:"原生koa2-静态资源服务器例子",children:[{level:3,title:"代码目录",slug:"代码目录",children:[]},{level:3,title:"代码解析",slug:"代码解析",children:[]},{level:3,title:"运行效果",slug:"运行效果",children:[]}]}],filePathRelative:"articles/Node/koa系统（3）-原生koa实现静态资源服务器.md",git:{}}},7177:(n,s,a)=>{a.r(s),a.d(s,{default:()=>E});var p=a(6252);const t=(0,p.uE)('<h1 id="原生koa2实现静态资源服务器" tabindex="-1"><a class="header-anchor" href="#原生koa2实现静态资源服务器" aria-hidden="true">#</a> 原生koa2实现静态资源服务器</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>一个http请求访问web服务静态资源，一般响应结果有三种情况</p><ul><li>访问文本，例如js，css，png，jpg，gif</li><li>访问静态目录</li><li>找不到资源，抛出404错误</li></ul><h2 id="原生koa2-静态资源服务器例子" tabindex="-1"><a class="header-anchor" href="#原生koa2-静态资源服务器例子" aria-hidden="true">#</a> 原生koa2 静态资源服务器例子</h2><p>demo源码</p>',6),e={href:"https://github.com/ChenShenhai/koa2-note/blob/master/demo/static-server/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("https://github.com/ChenShenhai/koa2-note/blob/master/demo/static-server/"),c=(0,p.uE)('<h3 id="代码目录" tabindex="-1"><a class="header-anchor" href="#代码目录" aria-hidden="true">#</a> 代码目录</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>├── static <span class="token comment"># 静态资源目录</span>\n│   ├── css/\n│   ├── image/\n│   ├── js/\n│   └── index.html\n├── util <span class="token comment"># 工具代码</span>\n│   ├── content.js <span class="token comment"># 读取请求内容</span>\n│   ├── dir.js <span class="token comment"># 读取目录内容</span>\n│   ├── file.js <span class="token comment"># 读取文件内容</span>\n│   ├── mimes.js <span class="token comment"># 文件类型列表</span>\n│   └── walk.js <span class="token comment"># 遍历目录内容</span>\n└── index.js <span class="token comment"># 启动入口文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="代码解析" tabindex="-1"><a class="header-anchor" href="#代码解析" aria-hidden="true">#</a> 代码解析</h3><h4 id="index-js" tabindex="-1"><a class="header-anchor" href="#index-js" aria-hidden="true">#</a> index.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./util/content&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> mimes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./util/mimes&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 静态资源目录对于相对入口文件index.js的路径</span>\n<span class="token keyword">const</span> staticPath <span class="token operator">=</span> <span class="token string">&#39;./static&#39;</span>\n\n<span class="token comment">// 解析资源类型</span>\n<span class="token keyword">function</span> <span class="token function">parseMime</span><span class="token punctuation">(</span> <span class="token parameter">url</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> extName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span>\n  extName <span class="token operator">=</span> extName <span class="token operator">?</span>  extName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;unknown&#39;</span>\n  <span class="token keyword">return</span>  mimes<span class="token punctuation">[</span> extName <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> <span class="token parameter">ctx</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 静态资源目录在本地的绝对路径</span>\n  <span class="token keyword">let</span> fullStaticPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> staticPath<span class="token punctuation">)</span>\n\n  <span class="token comment">// 获取静态资源内容，有可能是文件内容，目录，或404</span>\n  <span class="token keyword">let</span> _content <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">content</span><span class="token punctuation">(</span> ctx<span class="token punctuation">,</span> fullStaticPath <span class="token punctuation">)</span>\n\n  <span class="token comment">// 解析请求内容的类型</span>\n  <span class="token keyword">let</span> _mime <span class="token operator">=</span> <span class="token function">parseMime</span><span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url <span class="token punctuation">)</span>\n\n  <span class="token comment">// 如果有对应的文件类型，就配置上下文的类型</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> _mime <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> _mime\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 输出静态资源内容</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> _mime <span class="token operator">&amp;&amp;</span> _mime<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;image/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果是图片，则用node原生res，输出二进制数据</span>\n    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>_content<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 其他则输出文本</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> _content\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[demo] static-server is starting at port 3000&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h4 id="util-content-js" tabindex="-1"><a class="header-anchor" href="#util-content-js" aria-hidden="true">#</a> util/content.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 封装读取目录内容方法</span>\n<span class="token keyword">const</span> dir <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./dir&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 封装读取文件内容方法</span>\n<span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./file&#39;</span><span class="token punctuation">)</span>\n\n\n<span class="token doc-comment comment">/**\n * 获取静态资源内容\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">ctx</span> koa上下文\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">静态资源目录在本地的绝对路径</span>\n * <span class="token keyword">@return</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> 请求获取到的本地内容\n */</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">content</span><span class="token punctuation">(</span> <span class="token parameter">ctx<span class="token punctuation">,</span> fullStaticPath</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \n  <span class="token comment">// 封装请求资源的完绝对径</span>\n  <span class="token keyword">let</span> reqPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>fullStaticPath<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>url<span class="token punctuation">)</span>\n\n  <span class="token comment">// 判断请求路径是否为存在目录或者文件</span>\n  <span class="token keyword">let</span> exist <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span> reqPath <span class="token punctuation">)</span>\n  \n  <span class="token comment">// 返回请求内容， 默认为空</span>\n  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>exist <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//如果请求路径不存在，返回404</span>\n    content <span class="token operator">=</span> <span class="token string">&#39;404 Not Found! o(╯□╰)o！&#39;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">//判断访问地址是文件夹还是文件</span>\n    <span class="token keyword">let</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span> reqPath <span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span> stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//如果为目录，则渲读取目录内容</span>\n      content <span class="token operator">=</span> <span class="token function">dir</span><span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url<span class="token punctuation">,</span> reqPath <span class="token punctuation">)</span>\n\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果请求为文件，则读取文件内容</span>\n      content <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">file</span><span class="token punctuation">(</span> reqPath <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> content\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> content\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="util-dir-js" tabindex="-1"><a class="header-anchor" href="#util-dir-js" aria-hidden="true">#</a> util/dir.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 遍历读取目录内容方法</span>\n<span class="token keyword">const</span> walk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./walk&#39;</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 封装目录内容\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">url</span> 当前请求的上下文中的url，即ctx.url\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">reqPath</span> 请求静态资源的完整本地路径\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> 返回目录内容，封装成HTML\n */</span>\n<span class="token keyword">function</span> <span class="token function">dir</span> <span class="token punctuation">(</span> <span class="token parameter">url<span class="token punctuation">,</span> reqPath</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \n  <span class="token comment">// 遍历读取当前目录下的文件、子目录</span>\n  <span class="token keyword">let</span> contentList <span class="token operator">=</span> <span class="token function">walk</span><span class="token punctuation">(</span> reqPath <span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul&gt;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> <span class="token punctuation">[</span> index<span class="token punctuation">,</span> item <span class="token punctuation">]</span> <span class="token keyword">of</span> contentList<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;li&gt;&lt;a href=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span> \n  <span class="token punctuation">}</span>\n  html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/ul&gt;</span><span class="token template-punctuation string">`</span></span>\n  \n  <span class="token keyword">return</span> html\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> dir\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="util-file-js" tabindex="-1"><a class="header-anchor" href="#util-file-js" aria-hidden="true">#</a> util/file.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 读取文件方法\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">文件本地的绝对路径</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token operator">|</span>binary<span class="token punctuation">}</span></span> \n */</span>\n<span class="token keyword">function</span> <span class="token function">file</span> <span class="token punctuation">(</span> <span class="token parameter">filePath</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n <span class="token keyword">let</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span> <span class="token punctuation">)</span>\n <span class="token keyword">return</span> content\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> file\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="util-walk-js" tabindex="-1"><a class="header-anchor" href="#util-walk-js" aria-hidden="true">#</a> util/walk.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> mimes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./mimes&#39;</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 遍历读取目录内容（子目录，文件名）\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">reqPath</span> 请求资源的绝对路径\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>array<span class="token punctuation">}</span></span> 目录内容列表\n */</span>\n<span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span> <span class="token parameter">reqPath</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span> reqPath <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> dirList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">=</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> item <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> itemArr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> itemMime <span class="token operator">=</span> <span class="token punctuation">(</span> itemArr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">?</span> itemArr<span class="token punctuation">[</span> itemArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> mimes<span class="token punctuation">[</span> itemMime <span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dirList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      fileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n\n  <span class="token keyword">let</span> result <span class="token operator">=</span> dirList<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> fileList <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> walk<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="util-mime-js" tabindex="-1"><a class="header-anchor" href="#util-mime-js" aria-hidden="true">#</a> util/mime.js</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mimes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;css&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/css&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;less&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/css&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;gif&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/gif&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;html&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;ico&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/x-icon&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;jpeg&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;jpg&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;js&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;json&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;pdf&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/pdf&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;png&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;svg&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/svg+xml&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;swf&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/x-shockwave-flash&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;tiff&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/tiff&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;txt&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;wav&#39;</span><span class="token operator">:</span> <span class="token string">&#39;audio/x-wav&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;wma&#39;</span><span class="token operator">:</span> <span class="token string">&#39;audio/x-ms-wma&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;wmv&#39;</span><span class="token operator">:</span> <span class="token string">&#39;video/x-ms-wmv&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;xml&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/xml&#39;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> mimes\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="运行效果" tabindex="-1"><a class="header-anchor" href="#运行效果" aria-hidden="true">#</a> 运行效果</h3><h4 id="启动服务" tabindex="-1"><a class="header-anchor" href="#启动服务" aria-hidden="true">#</a> 启动服务</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>node index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h4>',19),l={id:"访问http-localhost-3000",tabindex:"-1"},r=(0,p._)("a",{class:"header-anchor",href:"#访问http-localhost-3000","aria-hidden":"true"},"#",-1),i=(0,p.Uk)(" 访问"),u={href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("http://localhost:3000"),b=(0,p._)("p",null,[(0,p._)("img",{src:"https://s2.loli.net/2022/06/18/O7NgoCqFHj2mpnZ.png",alt:"static-server-result-01.png"})],-1),m={id:"访问http-localhost-3000-index-html",tabindex:"-1"},d=(0,p._)("a",{class:"header-anchor",href:"#访问http-localhost-3000-index-html","aria-hidden":"true"},"#",-1),h=(0,p.Uk)(" 访问"),g={href:"http://localhost:3000/index.html",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("http://localhost:3000/index.html"),w=(0,p._)("p",null,[(0,p._)("img",{src:"https://s2.loli.net/2022/06/18/fP3Jy91a6NRAUQC.png",alt:"static-server-result-02.png"})],-1),y={id:"访问http-localhost-3000-js-index-js",tabindex:"-1"},x=(0,p._)("a",{class:"header-anchor",href:"#访问http-localhost-3000-js-index-js","aria-hidden":"true"},"#",-1),j=(0,p.Uk)(" 访问"),v={href:"http://localhost:3000/js/index.js",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("http://localhost:3000/js/index.js"),_=(0,p._)("p",null,[(0,p._)("img",{src:"https://s2.loli.net/2022/06/18/k6aJlh9BFKsMzG7.png",alt:"static-server-result-03.png"})],-1),E={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),c,(0,p._)("h5",l,[r,i,(0,p._)("a",u,[k,(0,p.Wm)(a)])]),b,(0,p._)("h5",m,[d,h,(0,p._)("a",g,[f,(0,p.Wm)(a)])]),w,(0,p._)("h5",y,[x,j,(0,p._)("a",v,[q,(0,p.Wm)(a)])]),_],64)}}}}]);