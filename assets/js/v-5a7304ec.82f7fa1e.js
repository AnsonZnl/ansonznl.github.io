"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1520],{4672:(e,i,l)=>{l.r(i),l.d(i,{data:()=>t});const t={key:"v-5a7304ec",path:"/computer-base/Git.html",title:"Git",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Git 常用命令",slug:"git-常用命令",children:[]},{level:2,title:"分支",slug:"分支",children:[]},{level:2,title:"合并分支",slug:"合并分支",children:[]},{level:2,title:"代码储存",slug:"代码储存",children:[]},{level:2,title:"标签",slug:"标签",children:[]},{level:2,title:"SSH",slug:"ssh",children:[]},{level:2,title:"user",slug:"user",children:[]},{level:2,title:"问题场景",slug:"问题场景",children:[]},{level:2,title:"只记得用户名和密码的情况下使用",slug:"只记得用户名和密码的情况下使用",children:[]},{level:2,title:"注意",slug:"注意",children:[]},{level:2,title:"问题",slug:"问题",children:[{level:3,title:"git config proxy",slug:"git-config-proxy",children:[]}]},{level:2,title:"commit message 规范",slug:"commit-message-规范",children:[]},{level:2,title:"Git 将 master 最新代码拉取到当前开发分支",slug:"git-将-master-最新代码拉取到当前开发分支",children:[]},{level:2,title:"GitHub",slug:"github",children:[]},{level:2,title:"git 提示错误 fatal: refusing to merge unrelated histories",slug:"git-提示错误-fatal-refusing-to-merge-unrelated-histories",children:[]},{level:2,title:"git 如何关闭 commit 时的语法检测 —husky",slug:"git-如何关闭-commit-时的语法检测-—husky",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"computer-base/Git.md",git:{}}},4989:(e,i,l)=>{l.r(i),l.d(i,{default:()=>B});var t=l(6252);const a=(0,t._)("h1",{id:"git",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),(0,t.Uk)(" Git")],-1),r=(0,t.Uk)("关于 Git 学习的书籍"),o={href:"https://www.progit.cn/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Git Pro"),d=(0,t.uE)('<p><img src="/img/computer-base/git命令速查.png" alt="Git 常用命令"></p><h2 id="git-常用命令" tabindex="-1"><a class="header-anchor" href="#git-常用命令" aria-hidden="true">#</a> Git 常用命令</h2><ul><li><code>git status</code> 查看状态</li><li><code>git add</code> 添加变动至暂存区</li><li><code>git commit -m &#39;xxx&#39;</code> 提交暂存区至工作区</li><li><code>git push</code> 拉取代码</li><li><code>cat xx.js</code> 查看文件</li><li><code>git log</code> 打印 git 日志</li><li><code>git reset</code> 回退版本</li><li><code>git checkout -- xx.js</code> 把工作区的修改全部撤回</li><li><code>git diff HEAD -- xx.js</code> 查看当前的变动</li><li><code>git pull</code> 推送代码</li><li><code>git commit -n -m &#39;xxx&#39;</code> 忽略 husky 检测</li></ul><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><ul><li>查看分支 <code>git branch</code></li><li>创建分支 <code>git branch xx</code>(分支名称)</li><li>切换分支 <code>git checkout xx</code>(分支名称)</li><li>创建并切换分支<code>git checkout -b xx</code>(分支名称)</li><li>合并分支 <code>git merge dev</code>(分支名称) 把当前分支合并到主分支</li><li>删除分支 <code>git branch -d dev</code>(分支名称)</li><li>查看远程分支详情 <code>git remote -v</code></li><li>推送指定分支 <code>git push origin dev</code>(分支名称)</li><li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li><li>下载指定分支 <ul><li><code>git clone -b dev2 http://git-test.etledu.com/ETLBOAO/BIM1xTrain.git</code></li><li><code>git clone -b</code> 指定从分支下载 dev2 指定从哪个分支下载 http git 链接</li></ul></li></ul><h2 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h2><p>比如将 dev 合并到 master 分支</p><ul><li>先在 dev 分支上拉取 master 分支，保证是最新的代码(<code>git pull origin master</code>)</li><li>然后切换到 master 分支(<code>git checkout master</code>)</li><li>然后合并（<code>git merge dev</code>）</li></ul>',8),n=(0,t.Uk)("参考："),s={href:"https://www.jianshu.com/p/26d050497abb",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Uk)("分支合并，一看就懂"),u=(0,t._)("h2",{id:"代码储存",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#代码储存","aria-hidden":"true"},"#"),(0,t.Uk)(" 代码储存")],-1),h=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("code",null,"git stash"),(0,t.Uk)(" 将代码存储在储存区")])],-1),p=(0,t.Uk)("参考："),m={href:"https://www.cnblogs.com/zndxall/archive/2018/09/04/9586088.html",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Uk)("Git Stash 使用方法"),x=(0,t.uE)('<h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为 HEAD，也可以指定一个 commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> SSH</h2><p>最近的 http 链接总是出问题，还是 ssh 比较稳。</p>',4),f={href:"https://blog.csdn.net/qq_35495339/article/details/92847819",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("Github 生成 SSH 秘钥（详细教程）"),k=(0,t.uE)('<h2 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> user</h2><p>切换帐号其实很简单， 如果你不知道现在本地 Git 用的帐号是什么，你可以输入</p><ul><li><code>git config user.name</code>查看用户名</li><li><code>git config user.email</code>查看用户邮箱</li></ul><p>修改用户名和邮箱的命令</p><ul><li><code>git config --global user.name &quot;Your_username&quot;</code></li><li><code>git config --global user.email &quot;Your_email&quot;</code></li></ul><p>查看是否配置成功</p><ul><li><code>git config --list</code></li></ul><h2 id="问题场景" tabindex="-1"><a class="header-anchor" href="#问题场景" aria-hidden="true">#</a> 问题场景</h2><ul><li>技术主管让你去再某个 git 分支上新建一个分支去做你的项目，那么如何在原远程分支的基础上新建自己的分支呢？ 解决方法</li><li>按照以下命令敲即可</li><li><code>git branch newBranch</code> -- 新建本地分支</li><li><code>git checkout newBranch</code> -- 本地切换到自己的分支</li><li><code>git pull origin xxxxBranch</code> -- 从远程目标分支 copy 代码</li><li><code>git push origin newBranch</code> -- 将本地新建的分支同步到服务器</li><li><code>git branch --set-upstream-to=origin/newbranch newbranch</code> -- 本地分支和远程分支建立追踪 到此为止，就完成了需求</li></ul><h2 id="只记得用户名和密码的情况下使用" tabindex="-1"><a class="header-anchor" href="#只记得用户名和密码的情况下使用" aria-hidden="true">#</a> 只记得用户名和密码的情况下使用</h2><p><img src="https://s2.loli.net/2022/06/22/CBgZWP5nLXGAaMH.png" alt="git-without.png"></p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><ul><li><code>push</code> 之前先 <code>pull</code> 代码</li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="git-config-proxy" tabindex="-1"><a class="header-anchor" href="#git-config-proxy" aria-hidden="true">#</a> git config proxy</h3><p>前一段时间因为墙很厚，github 的代码老是拉取失败，后来就设置了下代理，然后这两天在使用的时候就老报错。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. fatal: unable to access &#39;http://xxx&#39;: OpenSSL SSL_read: Connection was reset, errno 10054\n2. fatal: unable to access &#39;http://xxx&#39;: Received HTTP code 400 from proxy after CONNECT\n3. fatal: unable to access &#39;http://xxx&#39;: Failed to connect to github.com port 443: Timed out\n4. fatal: unable to access &#39;http://xxx&#39;: Received HTTP code 400 from proxy after CONNECT\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="commit-message-规范" tabindex="-1"><a class="header-anchor" href="#commit-message-规范" aria-hidden="true">#</a> commit message 规范</h2><p>提交格式：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>type（必须）：用于说明 commit 的类别，可以使用以下标示 <ul><li>feat：新功能（feature）</li><li>fix：修复 bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li>scope（选填）：描述影响范围 <ul><li>数据层</li><li>控制层</li><li>视图层</li></ul></li><li>subject（必填）：本次变动的简短描述 <ul><li>五十字以内</li><li>使用第一人称</li><li>以动词开头</li></ul></li></ul>',21),_=(0,t.Uk)("参考："),w={href:"https://ishare.58corp.com/articleDetail?id=37307",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("58-知识分享社区"),G=(0,t.uE)('<p><strong>Commit example</strong></p><ul><li>feat：新增功能</li><li>fix：bug 修复</li><li>docs：文档更新</li><li>style：不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)</li><li>refactor：重构代码(既没有新增功能，也没有修复 bug)</li><li>perf：性能, 体验优化</li><li>test：新增测试用例或是更新现有测试</li><li>build：主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</li><li>ci：主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle 等)的提交</li><li>chore：不属于以上类型的其他类型，比如构建流程, 依赖管理</li><li>revert：回滚某个更早之前的提交</li></ul><h2 id="git-将-master-最新代码拉取到当前开发分支" tabindex="-1"><a class="header-anchor" href="#git-将-master-最新代码拉取到当前开发分支" aria-hidden="true">#</a> Git 将 master 最新代码拉取到当前开发分支</h2><blockquote><p>假设你正在开发一个新功能，还没开发完成。但是团队成员 A 最近开发了 B 功能，这个功能最近上线后合并到 master 了，此时你要拉取 master 最新代码到你的分支中。</p></blockquote><ol><li><p>切换到 master 主分支上 <code>git checkout master</code></p></li><li><p>将 master 更新的代码拉取到本地 <code>git pull</code></p></li><li><p>再切换到自己的分支假设为： add_order 上 <code>git checkout add_order</code></p></li><li><p>合并 master 到自己的分支 add_order 上 <code>git merge master</code></p></li></ol><p>5、提交合并后的代码 <code>git add .</code><code>git commit -m &quot;merge master&quot;</code></p><p>6、提交到远程仓库 <code>git push origin add_order</code></p><h2 id="github" tabindex="-1"><a class="header-anchor" href="#github" aria-hidden="true">#</a> GitHub</h2>',8),q={href:"https://blog.csdn.net/u014028063/article/details/81559573",target:"_blank",rel:"noopener noreferrer"},U=(0,t.Uk)("github 上 fork 原项目，如何将本地仓库代码更新到最新版本？"),C=(0,t.uE)('<p>如出现 Please enter a commit message to explain why this merge is necessary.（请输入提交消息来解释为什么这种合并是必要的）</p><p>git 在 pull 或者合并分支的时候有时会遇到这个界面。可以不管(直接下面 3,4 步)，如果要输入解释的话就需要:</p><p>1.按键盘字母 i 进入 insert 模式</p><p>2.修改最上面那行黄色合并信息,可以不修改</p><p>3.按键盘左上角&quot;Esc&quot;</p><p>4.输入&quot;:wq&quot;,注意是冒号+wq,按回车键即可</p><h2 id="git-提示错误-fatal-refusing-to-merge-unrelated-histories" tabindex="-1"><a class="header-anchor" href="#git-提示错误-fatal-refusing-to-merge-unrelated-histories" aria-hidden="true">#</a> git 提示错误 fatal: refusing to merge unrelated histories</h2><p>新建了一个仓库之后，把本地仓库进行关联提交、拉取的时候，出现了如下错误<code>fatal: refusing to merge unrelated histories</code></p><p>造成 fatal: refusing to merge unrelated histories 错误的原因有以下几点：</p><ol><li>有一个包含一些提交的新 Git 存储库。然后，您尝试从现有的远程仓库中提取。合并变得不兼容，因为分支和远程拉取的历史不同。当你试图合并两个完全不相关的分支时，Git 看到了这种情况，它不知道该怎么做。</li><li>目录有问题.git。它可能在某些时候被意外删除或损坏。如果您克隆或清理了项目，则可能会发生这种情况。此处发生错误是因为 Git 没有有关本地项目历史的必要信息。</li><li>当您尝试从远程仓库推送或拉取数据时，分支位于不同的 HEAD 位置，并且由于缺乏共性而无法匹配。</li></ol><p>解决办法是：<br> 在 git pull 和 git push 命令中添加<code>–allow-unrelated-histories</code> 让 git 允许提交不关联的历史代码。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git merge master --allow-unrelated-histories\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参考： https://blog.csdn.net/ZCaesarK/article/details/125316158</p><h2 id="git-如何关闭-commit-时的语法检测-—husky" tabindex="-1"><a class="header-anchor" href="#git-如何关闭-commit-时的语法检测-—husky" aria-hidden="true">#</a> git 如何关闭 commit 时的语法检测 —husky</h2><ol><li><p>报错提示:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git commit 提交时报错如下: `husky+&gt;+pre-commit+(node+v14.18.2)`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>解决方案:</p><ol><li>卸载 husky。只要把项目的<code>package.json</code>文件中<code>devDependencies</code>节点下的<code>husky</code>库删掉，然后重新<code>npm i</code>一次即可。或者直接在项目根目录下执行<code>npm uninstall husky --save</code>也可以，再次提交，自动化测试功能就屏蔽掉</li><li>进入项目的.git 文件夹(文件夹默认隐藏,可先设置显示或者命令 ls 查找),再进入 hooks 文件夹,删除 pre-commit 文件,重新<code>git commit -m &#39;xxx&#39;</code> git push 即可</li><li>将 <code>git commit -m &quot;XXX&quot;</code> 改为 <code>git commit --no-verify -m &quot;xxx&quot;</code></li></ol></li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',16),E={href:"https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536",target:"_blank",rel:"noopener noreferrer"},H=(0,t.Uk)("廖雪峰 Git 教程"),S={href:"https://www.progit.cn/",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("Pro Git 中文版阅读（第二版）"),W=(0,t._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,t._)("pre",{class:"language-text"},[(0,t._)("code",null,"\n")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])],-1),B={render:function(e,i){const l=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[a,(0,t._)("p",null,[r,(0,t._)("a",o,[c,(0,t.Wm)(l)])]),d,(0,t._)("p",null,[n,(0,t._)("a",s,[g,(0,t.Wm)(l)])]),u,h,(0,t._)("p",null,[p,(0,t._)("a",m,[b,(0,t.Wm)(l)])]),x,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",f,[v,(0,t.Wm)(l)])])]),k,(0,t._)("p",null,[_,(0,t._)("a",w,[y,(0,t.Wm)(l)])]),G,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",q,[U,(0,t.Wm)(l)])])]),C,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",E,[H,(0,t.Wm)(l)])]),(0,t._)("li",null,[(0,t._)("a",S,[T,(0,t.Wm)(l)])])]),W],64)}}}}]);