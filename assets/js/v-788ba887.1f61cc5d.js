"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[907],{6568:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-788ba887",path:"/articles/JavaScript/%E7%A9%BA%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E3%80%91.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 字符串 '\\t' 是什么？",slug:"_1-字符串-t-是什么",children:[]},{level:2,title:"2. JavaScript 中的类型转换",slug:"_2-javascript-中的类型转换",children:[]},{level:2,title:"3. 结果",slug:"_3-结果",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/JavaScript/空格字符串转换【你不知道的JS】.md",git:{}}},5367:(e,n,a)=>{a.r(n),a.d(n,{default:()=>b});var s=a(6252);const o=(0,s.uE)('<p>工作之余，我在掘金摸鱼的时候发现了这张图，其他的都还好理解，但是我对<code>&#39;\\t&#39; == 0</code> 大为震撼。</p><p>打开控制台随机开始了验证，居然是真的，为什么会这样呢？聊一聊这个神奇的事情～</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d917c9787af44d9e88c8cc8715fc2d9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=774&amp;h=755&amp;s=177625&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><h2 id="_1-字符串-t-是什么" tabindex="-1"><a class="header-anchor" href="#_1-字符串-t-是什么" aria-hidden="true">#</a> 1. 字符串 &#39;\\t&#39; 是什么？</h2><p>首先，让我们看看 <code>&#39;\\t&#39;</code> 是什么。<code>&#39;\\t&#39;</code> 是一个包含制表符字符的字符串。</p><p>制表符是一种特殊字符，通常用于在文本中创建水平间距，就像在文档中的制表符键或者按下 Tab 键一样。它在字符串中以 <code>\\t</code> 进行表示。</p><h2 id="_2-javascript-中的类型转换" tabindex="-1"><a class="header-anchor" href="#_2-javascript-中的类型转换" aria-hidden="true">#</a> 2. JavaScript 中的类型转换</h2><p>在 JavaScript 中，<code>==</code> 是相等运算符，它用于比较两个值是否相等。当使用 <code>==</code> 进行比较时，JavaScript 会根据一组隐式类型转换规则来尝试将操作数转换为相同的类型，然后再进行比较。</p><p>以下是 <code>==</code> 运算符的隐式类型转换规则的简要描述：</p><ol><li><p><strong>类型转换</strong>：如果两个操作数的类型不同，JavaScript 会尝试将它们转换为相同的类型。</p></li><li><p><strong>原始类型比较</strong>：如果两个操作数都是原始类型（如数字、字符串、布尔值），它们将会被转换为相同的类型，然后进行比较。</p></li><li><p><strong>null 和 undefined 比较</strong>：如果其中一个操作数是 <code>null</code>，另一个是 <code>undefined</code>，它们会被视为相等。</p></li><li><p><strong>字符串和数字比较</strong>：如果一个操作数是字符串，另一个是数字，JavaScript 会尝试将字符串转换为数字，然后进行比较。如果字符串不能转换为有效的数字，则比较结果为 <code>false</code>。</p></li><li><p><strong>布尔值比较</strong>：如果一个操作数是布尔值，另一个是非布尔值，布尔值会被转换为数字，然后进行比较。<code>true</code> 被转换为 <code>1</code>，<code>false</code> 被转换为 <code>0</code>。</p></li><li><p><strong>对象和原始类型比较</strong>：如果一个操作数是对象，另一个是原始类型，对象会被转换为原始类型，然后再进行比较。这通常涉及到对象的 <code>valueOf()</code> 和 <code>toString()</code> 方法。</p></li><li><p><strong>特殊情况</strong>：有一些特殊情况，如 <code>NaN</code> 和 <code>-0</code>，它们的比较行为可能比较复杂。</p></li></ol>',10),c=(0,s.Uk)("对转换规则有疑惑的可以参考 "),t={href:"https://felix-kling.de/js-loose-comparison/",target:"_blank",rel:"noopener noreferrer"},p=(0,s.Uk)('JavaScript "loose" comparison step by step'),l=(0,s.Uk)(" ，这是一个线上工具，可以将比较过程按照步骤呈现出来。"),r=(0,s.uE)('<p>总之，<code>==</code> 运算符在比较不同类型的值时，会尝试将它们转换为相同类型，然后再进行比较。这种类型转换的行为可能导致一些意外的结果，因此在编写 JavaScript 代码时，最好使用 <code>===</code>（严格相等运算符）来避免隐式类型转换并确保类型和值都相等。</p><p>所以当我们执行<code>&#39;\\t&#39; == 0</code>的时候触发了类型转换规则的第 4 步，也就是将<code>&#39;\\t&#39;</code>转化为数字类型，我们看结果：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>是不是很奇怪，我理解的过程是这样：</p><p>当 JavaScript 尝试将字符串转换为数字时，它会查看字符串的内容。</p><p>如果字符串表示一个有效的数字，它将被转换为数字。但是，如果字符串的内容不是有效的数字字符，JavaScript 会将其转换为 NaN，而有一些特殊含义的字符会被转化为数字 <code>0</code>。</p><p>在这里，<code>&#39;\\t&#39;</code> 中的制表符字符被认为不是有效的数字字符，而是属于特殊的字符，因此它被转换为数字 <code>0</code>。</p><p>这里你可能会疑惑，为啥<code>&#39;\\t&#39;</code>会转成<code>0</code>呢? 举个例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&quot;Hello,\\nWorld!&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* \nHello,\tWorld! \n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所以其实<code>&#39;\\t&#39;</code>在输出的时候是一个制表符，<strong>没有实际的内容</strong>，所以在转换时被转化为了 <code>0</code>。</p><p>除此之外还有三个特殊字符：</p><ul><li><p><code>\\n</code>：表示换行符（Newline）。当你在字符串中使用 <code>\\n</code> 时，它表示在这个位置开始新的一行。这通常用于在文本中创建换行。</p></li><li><p><code>\\t</code>：表示制表符（Tab）。当你在字符串中使用 <code>\\t</code> 时，它表示在这个位置插入一个制表符，用于产生水平间距。制表符通常用于排列文本中的内容，以使其对齐。</p></li><li><p><code>\\r</code>：表示回车符（Carriage Return）。<code>\\r</code> 通常与 <code>\\n</code> 一起使用，表示在文本中的某个位置开始新的一行，并回到该行的起始位置，然后继续输入文本。但在大多数情况下，<code>\\n</code> 就足够表示换行，<code>\\r</code> 不常用。</p></li></ul><p>这三个特殊字符串在进行字符串转换数字时也都是<code>0</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然也有另外一个说法，是字符串中在 toNumber 时它首先会去除空格，然后判断该数字是否为非数字。如果 NaN，则结果为 <code>NaN</code>。如果字符串为空，则结果为 0。</p>',15),d=(0,s.Uk)("具体的实现，英语好的同学可以看看 "),i={href:"https://262.ecma-international.org/9.0/#sec-tonumber",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("ECMA - toNumber"),k=(0,s.uE)('<h2 id="_3-结果" tabindex="-1"><a class="header-anchor" href="#_3-结果" aria-hidden="true">#</a> 3. 结果</h2><p>因此，当我们执行 <code>&#39;\\t&#39; == 0</code> 比较时，JavaScript 首先将 <code>&#39;\\t&#39;</code> 转换为数字，这个过程中 <code>&#39;\\t&#39;</code> 被转换为 <code>0</code>，然后与右侧的数字 <code>0</code> 进行比较。由于它们都是数字 <code>0</code>，比较结果为 <code>true</code>。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',3),m={href:"https://stackoverflow.com/questions/10376179/n-t-r-0-is-true",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("stackoverflow - \\n\\t\\r == 0 is true"),b={render:function(e,n){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[o,(0,s._)("p",null,[c,(0,s._)("a",t,[p,(0,s.Wm)(a)]),l]),r,(0,s._)("p",null,[d,(0,s._)("a",i,[u,(0,s.Wm)(a)])]),k,(0,s._)("ul",null,[(0,s._)("li",null,[(0,s._)("a",m,[g,(0,s.Wm)(a)])])])],64)}}}}]);