"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3335],{5964:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-84552aec",path:"/articles/JavaScript/JS%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A8%A1%E5%9D%97.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"模块化的意义",slug:"模块化的意义",children:[{level:3,title:"模块化的好处",slug:"模块化的好处",children:[]}]},{level:2,title:"JS 中常见的模块",slug:"js-中常见的模块",children:[{level:3,title:"IIFE 模式：匿名函数自调用（闭包）",slug:"iife-模式-匿名函数自调用-闭包",children:[]},{level:3,title:"CommonJS",slug:"commonjs",children:[]},{level:3,title:"AMD",slug:"amd",children:[]},{level:3,title:"CMD",slug:"cmd",children:[]},{level:3,title:"UMD",slug:"umd",children:[]},{level:3,title:"ES6 Module",slug:"es6-module",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/JavaScript/JS中常见的模块.md",git:{}}},3375:(n,s,a)=>{a.r(s),a.d(s,{default:()=>C});var p=a(6252);const t=(0,p._)("p",null,[(0,p._)("img",{src:"https://i.loli.net/2021/05/14/UaXMWf3zJjpvASg.png",alt:"JavaScript-模块 1.png"})],-1),e=(0,p._)("h2",{id:"模块化的意义",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#模块化的意义","aria-hidden":"true"},"#"),(0,p.Uk)(" 模块化的意义")],-1),o=(0,p._)("p",null,"将代码拆分成独立的块，然后再把这些块使用模块模式连接起来实现不同的功能。",-1),c=(0,p._)("p",null,"就像小时候玩的拼图一样，不同的拼图组合在一起就可以拼成任意的形状。",-1),l=(0,p._)("p",null,[(0,p.Uk)("这种模式的背后思想也很简单："),(0,p._)("strong",null,"把逻辑分块、各自封装，相互独立，同时自行决定引入执行那些外部模块以及暴露自身的那些模块。")],-1),u=(0,p._)("p",null,"这个基本的思想是所有的 JavaScript 模块系统的基础。",-1),i=(0,p.Uk)("文中代码案例地址："),r={href:"https://github.com/AnsonZnl/JS-Modules-Sample",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("https://github.com/AnsonZnl/JS-Modules-Sample"),m=(0,p.uE)('<h3 id="模块化的好处" tabindex="-1"><a class="header-anchor" href="#模块化的好处" aria-hidden="true">#</a> 模块化的好处</h3><ul><li>避免命名冲突(减少命名空间污染)</li><li>更好的分离, 按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h2 id="js-中常见的模块" tabindex="-1"><a class="header-anchor" href="#js-中常见的模块" aria-hidden="true">#</a> JS 中常见的模块</h2><h3 id="iife-模式-匿名函数自调用-闭包" tabindex="-1"><a class="header-anchor" href="#iife-模式-匿名函数自调用-闭包" aria-hidden="true">#</a> IIFE 模式：匿名函数自调用（闭包）</h3><p>主要应用在浏览器端。</p><p>利用闭包的原理创造一个独有的函数作用域来保存私有变量，达到模块化的效果。</p><p><strong>使用</strong></p><p>HTML</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output-data(获取内部数据)</span>\n  myModule<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;new data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置内部数据</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output-undefined (不能访问模块内部数据)</span>\n  myModule<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">;</span> <span class="token comment">//不是修改的模块内部的data</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output-new data 修改后的值</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>JS</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// module.js文件</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">;</span>\n  <span class="token comment">//获取数据</span>\n  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 修改数据</span>\n  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">=</span> val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//暴露行为</span>\n  window<span class="token punctuation">.</span>myModule <span class="token operator">=</span> <span class="token punctuation">{</span>\n    get<span class="token punctuation">,</span>\n    set<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h3><p>主要应用在服务端，如果在浏览器端运行需要借助其他工具（Browserify）。</p><p><strong>暴露模块：</strong> <code>module.exports = value</code>或者<code>exports.xx = value</code>(exports 是一个导出的对象)</p><p><strong>引入模块：</strong> <code>require(xx)</code>，如果是第三方模块，xxx 为模块名，如果为自定义模块，xxx 为模块的文件路径。</p><p><strong>特点</strong></p><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ul><p><strong>使用</strong> 在 Node 中 安装 uniq 函数。</p><div class="language-base ext-base line-numbers-mode"><pre class="language-base"><code>npm init\nnpm install uniq --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// module.js</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// app.js</span>\n<span class="token keyword">let</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./module.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> uniq <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;uniq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">uniq</span><span class="token punctuation">(</span>module1<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h3><p>全称是 Asynchronous Module Definition - 异步模块定义</p><p>和 CommonJS 不同的是 AMD 采用非同步的方式来加载模块。</p><p><strong>基本语法</strong></p><p>定义暴露模块</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义没有依赖的模块</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> 模块<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 定义有依赖的模块</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;module1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;module2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> 模块<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>引入使用模块</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;module1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;module2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m1<span class="token punctuation">,</span> m2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  使用m1 和 m2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>使用案例</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- index.html --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 引入require.js并指定js主文件的入口 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n    <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/require.js/2.3.6/require.js<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;module.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> currentUrl <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;当前页面的URl：&quot;</span> <span class="token operator">+</span> currentUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// module.js</span>\n<span class="token comment">// 定义模块</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 暴露模块</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    getUrl<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>更多的使用方法请参考：https://requirejs.org/</p><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>CMD---是 SeaJS 在推广过程中对模块定义的规范化产出，是一个同步模块定义，是 SeaJS 的一个标准，SeaJS 是 CMD 概念的一个实现，SeaJS 是淘宝团队提供的一个模块开发的 JS 框架。</p><p>什么时候用到什么时候引入，即用即返回，这是一个同步概念。</p><p><strong>特点：</strong> CMD 是 AMD 在基础上改进的一种规范，和 AMD 不同在于依赖模块的执行机制不同，CMD 是就近依赖，而 AMD 是前置依赖。</p><p><strong>环境：</strong> 浏览器环境</p><p><strong>语法：</strong></p><ul><li>导入：define(function(require, exports, module){})</li><li>导出：define(function(){return &#39;值&#39;})</li></ul><p><strong>使用</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./module.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印出：hello world</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// module.js</span>\n<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>\n    <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/require.js/2.3.6/require.js<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Sea.js 用法请参考：https://seajs.github.io/seajs/docs/</p><h3 id="umd" tabindex="-1"><a class="header-anchor" href="#umd" aria-hidden="true">#</a> UMD</h3><p>全称 Universal Module Definition 看名字就知道，特点是兼容 AMD 和 CommonJS 规范，而且兼容全局引入。</p><p><strong>环境：</strong> 服务器环境和浏览器端</p><p><strong>UMD 实现原理很简单：</strong></p><ul><li>先判断是否支持 AMD（define 是否存在），存在则使用 AMD 方式加载模块；</li><li>再判断是否支持 Node.js 模块格式（exports 是否存在），存在则使用 Node.js 模块格式；</li><li>前两个都不存在，则将模块公开到全局（window 或 global）</li></ul><p><strong>使用</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//AMD</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//Node, CommonJS之类的</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">//浏览器全局变量(root 即 window)</span>\n    root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//方法</span>\n  <span class="token keyword">function</span> <span class="token function">myFuncA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 私有方法，因为没有返回</span>\n  <span class="token keyword">function</span> <span class="token function">myFuncB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 公共方法，因为返回了</span>\n\n  <span class="token comment">//暴露公共方法</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    myFuncB<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>大家平时引入的 jQuery 的 CND 就是 UMD 的，源码可以查看：https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js</p><h3 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module" aria-hidden="true">#</a> ES6 Module</h3><p>在 ES6 之前，模块化主要是社区在推动进行的，从而出现了 CommonJS 和 AMD 两个，前者用于服务器后者用于浏览器，ES6 模块的出现将完全替代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的解决方案。</p><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><p><strong>特点</strong> ：</p><ul><li>按需加载（编译时加载）</li><li>import 和 export 命令只能在模块的顶层，不能在代码块之中（如：if 语句中）,import()语句可以在代码块中实现异步动态按需动态加载</li></ul><p><strong>环境：</strong> 服务器环境和浏览器端</p><p><strong>语法：</strong></p><ul><li>导入：<code>import {modules1,modules1,} from &#39;模块路径&#39;</code></li><li>导出：<code>export</code>或者<code>export default</code></li><li>动态导入：<code>import(&#39;模块路径&#39;).then(..)</code></li></ul><p><strong>使用</strong></p><p>Node 中 先安装 Babel:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node\nnpm install --save @babel/polyfill\n# 然后运行\nnpx babel-node main.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// modules/double.js</span>\n<span class="token keyword">let</span> mes <span class="token operator">=</span> <span class="token string">&quot;Hello Modules for double&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  mes<span class="token punctuation">,</span>\n  sum<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// main.js</span>\n<span class="token keyword">import</span> module <span class="token keyword">from</span> <span class="token string">&quot;./modules/double&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Modules for double - 20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>浏览器中</p><p><strong>区别</strong></p><ul><li><p>和 CommonJS 的区别：</p><ul><li>CommonJS 模块输出的是一个值得拷贝，ES6 模块输出的是值的引用</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li><li>CommonJS 模块的 require()是同步加载模块，ES6 模块的 import 命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ul></li></ul>',68),d=(0,p._)("strong",null,"缺点",-1),b=(0,p.Uk)(" 浏览器和服务器目前的支持不是很好，现阶段使用需要借助一些工具（"),g={href:"https://www.babeljs.cn/",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("Babel"),f=(0,p.Uk)("）。"),v=(0,p.uE)('<ul><li>浏览器支持：在新版本的浏览器（如 Chrome）中可以使用<code>&lt;script type=&quot;module&quot; src=&quot;./foo.js&quot;&gt;&lt;/script&gt;</code>写法</li><li>服务器支持（Node）有两种模式，分别是 ES6 模块和 CommonJS。 <ul><li>从 Node.js v13.2 开始，默认支持 ES6 模块，但是需要采用<code>.mjs</code>为后缀名、或者在<code>package.json</code>中修改<code>type</code>字段为<code>module</code>（推荐）</li><li>使用 CommonJS 的话需要以<code>.cjs</code>为后缀，也可以设置<code>package.json</code>中修改<code>type</code>字段为<code>commonjs</code>（推荐）。</li></ul></li></ul><p>最好不要两者混用。更多的使用方法可以参考：https://es6.ruanyifeng.com/#docs/module</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>CommonJS 规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了 AMD CMD 解决方案。</li><li>AMD 规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD 规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD 规范与 AMD 规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在 Node.js 中运行。不过，依赖 SPM 打包，模块的加载逻辑偏重</li><li><strong>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</strong></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',5),q={href:"https://juejin.cn/post/6844903744518389768",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("前端模块化详解"),y={href:"https://segmentfault.com/a/1190000012419990",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("JS 模块"),x={href:"https://www.php.cn/js-tutorial-410584.html",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("javascript 中 UMD 规范介绍"),M={href:"https://es6.ruanyifeng.com/#docs/module",target:"_blank",rel:"noopener noreferrer"},D=(0,p.Uk)("ES6 Modules"),J={href:"https://mp.weixin.qq.com/s/quoWsIAvLITT6jGWs3higg",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("一篇理解前端模块化：AMD、CMD、CommonJS、ES6"),C={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,(0,p._)("p",null,[i,(0,p._)("a",r,[k,(0,p.Wm)(a)])]),m,(0,p._)("p",null,[d,b,(0,p._)("a",g,[h,(0,p.Wm)(a)]),f]),v,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",q,[j,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",y,[w,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",x,[S,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",M,[D,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",J,[A,(0,p.Wm)(a)])])])],64)}}}}]);