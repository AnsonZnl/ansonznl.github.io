"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1346],{3850:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3abeb4dd",path:"/articles/JavaScript/%E7%90%86%E8%A7%A3JS%E5%8E%9F%E5%9E%8B%E9%93%BE.html",title:"理解 JS 原型链",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"字面量创建对象",slug:"字面量创建对象",children:[]},{level:2,title:"构造函数创建对象",slug:"构造函数创建对象",children:[]},{level:2,title:"原型对象",slug:"原型对象",children:[]},{level:2,title:"原型链",slug:"原型链",children:[]},{level:2,title:"补充",slug:"补充",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/JavaScript/理解JS原型链.md",git:{}}},821:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var p=a(6252);const e=(0,p.uE)('<h1 id="理解-js-原型链" tabindex="-1"><a class="header-anchor" href="#理解-js-原型链" aria-hidden="true">#</a> 理解 JS 原型链</h1><p>一直以来对于 JavaScript 的原型链的概念，始终有些东西有一种模糊感，最近刚好有时间就认真的把《JavaScript 高级程序设计》中相关内容认真读了一遍，也查看了很多网上很多资料，以前很多不明白的地方也渐渐明白了起来。</p><p>写一篇文章记录一下最近学习的感悟。</p><h2 id="字面量创建对象" tabindex="-1"><a class="header-anchor" href="#字面量创建对象" aria-hidden="true">#</a> 字面量创建对象</h2><p>我们通常创建一个对象无非就两种方式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token number">1.</span> <span class="token keyword">let</span> obj<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new 一个Object的实例</span>\n <span class="token number">2.</span> <span class="token keyword">let</span> obj<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//对象字面量</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用对象字面量 和使用 new 的方式是一样的。</p><p>为了简便，一般推荐使用使用字面量：<code>let o = {};</code></p><h2 id="构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#构造函数创建对象" aria-hidden="true">#</a> 构造函数创建对象</h2><p>当我们想要创建自定义的对象时，需要用到构造函数。</p><p>构造函数和普通函数有两个区别：</p><ol><li>便于和普通函数区分，函数名首字母大写。</li><li>使用 <code>new</code> 操作符调用，返回一个实例对象。</li></ol><p>除此之外和普通函数一摸一样。</p><p>我们使用构造函数<code>Person</code>来创建两个实例对象：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{name: &quot;小明&quot;, sayName: fun}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{name: &quot;小红&quot;, sayName: fun}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面的例子不难理解，虽然这两个实例对象都有<code>sayName</code>方法，而且他们两个的作用也是一样的，但却是两个方法，只是名字和作用一样。</p><p>画个图表示一下：</p><p><img src="https://i.loli.net/2020/12/28/bE36ugvjYMqCwr8.jpg" alt="js_prot_1.jpg"></p><p>如果还不明白，我在打个比喻：</p><p>就像 A 街上有一间麦当劳，在 B 街上也开了一间麦当劳，它们都叫麦当劳，作用也是一样的。但是你总不能说他们是一间麦当劳吧？</p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>person1.sayName === person2.sayName;//false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果这样的话，我们每构造出来一个对象，都要单独为这个对象创建出一个专属于它自己使用的<code>sayName</code>，这是很占用内存的。</p><p>那我们能不能让所有的实例对象都共同使用一个<code>sayName</code>方法，来节省内存，提升效率呢？这需要我们先理解原型对象的概念。</p><h2 id="原型对象" tabindex="-1"><a class="header-anchor" href="#原型对象" aria-hidden="true">#</a> 原型对象</h2><p>我们先了解原型对象的概念。</p><blockquote><p>每个对象都有原型对象（null 除外），我们用<code>__proto__</code>表示，每个函数都有<code>prototype</code>属性，指向实例的原型对象。</p></blockquote><p>对照这句话，按照我们上面的例子，也就是说<code>Person.prototype</code>指向<code>person1</code>的原型对象(<code>__proto__</code>),</p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>Person.prototype === person1.__proto__; // true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>为了便于理解，来看一张图。</p><p><img src="https://i.loli.net/2020/12/28/ZXfrFQIK2ycWnPo.jpg" alt="js_prot_2.jpg"></p><p>恩~ 它们的关系大概就是这样。</p><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>原型链简单用一句话概括就是：</p><blockquote><p>原型链就是 对象的<code>__proto__</code>所连接的链状结构（其实可以理解为链表结构）</p></blockquote><p>为了方便我们理解原型链，举一个简单的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 1, b: 2}</span>\n<span class="token comment">//原型链：</span>\n<span class="token comment">//o --&gt; o.__proto__ --&gt; o.__proto__.__proto__ --&gt; null</span>\n<span class="token comment">// 其中的 --&gt; 就表示 __proto__ 也就是原型链</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token comment">// o上有a这个属性吗？有的，该属性的值为1</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token comment">// o上有b这个属性吗？有的，该属性的值为2</span>\n<span class="token comment">// 原型上也有一个&#39;b&#39;属性,但是它不会被访问到.这种情况称为&quot;属性遮蔽 &quot;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token comment">// o上有c这个属性吗？没有，那看看原型上有没有</span>\n<span class="token comment">// o.__proto__上有c这个属性吗？有的，该属性的值为4</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token comment">// o上有d这个属性吗？没有,那看看原型上有没有</span>\n<span class="token comment">// o.__proto__ 上有d这个属性吗？没有，那看看它的原型上有没有</span>\n<span class="token comment">// o.__proto__.__proto__ 为 null，停止搜索</span>\n<span class="token comment">// 没有找到d属性，返回undefined。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>我们画张图来表示：</p><p><img src="https://i.loli.net/2020/12/28/Q4PFTuxezMRyr3t.jpg" alt="js_prot_3.jpg"></p><p>图中这条红色的线就是原型链。 由此可见，<strong>实例对象可访问自己原型对象上的属性和方法</strong>，额... 准确来说是:</p><ol><li>当一个对象 查找属性或方法时，自己有，停止查找，返回结果。</li><li>自己没有，顺着<code>__proto__</code>一直向上查找，如找到，停止查找，返回结果。</li><li>如果一直找到了原型链的最顶端(null)，还没有找到，返回<code>undefined</code>。</li></ol><p>我们先回顾一下那个<code>sayName</code>的问题： <strong>怎么让所有的实例对象都是用一个<code>sayName</code>方法呢</strong>。<br> 现在我们可以使用原型对象来解决这个问题了。<br> 我们把<code>sayName</code>方法放到实例的原型对象上面，也就是<code>Person.prototype</code>上面来供所有实例使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>用图表示：</p><p><img src="https://i.loli.net/2020/12/28/Qya9Hhp6WS18ZiP.jpg" alt="js_prot_4.jpg"></p><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h2><p><strong>constructor</strong><br> 说一下我的经历，一开始理解原型链时，一直在<code>prototype</code>、<code>__proto__</code>、<code>constructor</code>在这个三个属性中绕来绕去。</p><p>为了便于理解，我把<code>constructor</code>放在最后了。<br><code>constructor</code>字面意思就很容易理解，构造函数的意思。 一句话解释:</p><blockquote><p>每个原型对象都有一个 constructor 属性指向 关联的构造函数。</p></blockquote><p>还是上面那个例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Person(){ fun }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>需要注意的一点是，实例对象上没有<code>constructor</code>属性。 但是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Person(){ fun }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>得出这个结果很简单: 实例上查找不到<code>constructor</code>属性 --&gt; 顺着<code>__proto__</code>在原型对象上找 --&gt; 找到并返回。</p><p><strong>Object.prototype</strong><br> 刚才我们说了创建对象的两种方式：字面量创建对象和使用<code>new</code>操作符创建对象。<br> 这两种方式创建出来的对象都会继承<code>Object.prototyoe</code>上的方法。 比如，我们使用字面量新创建一个对象<code>o</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\no<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&quot;[object Object]&quot;</span>\n<span class="token comment">//查找过程： o --&gt; o.__proto__ 找到返回</span>\no<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>o</code>这个的对象本身并没有<code>toString</code>这个方法，但它却可以使用<code>toString</code>方法。<br> 因为它继承了<code>Object.prototyoe</code>上的<code>toString</code>的方法。</p><p><strong>null</strong><br> 既然对象都会继承自<code>Object.prototype</code>上面的方法，那它自己的原型又是什么呢。答案是<code>null</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__prototype__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然而 null 究竟代表了什么呢？</p><p>引用阮一峰老师的 《undefined与null的区别》 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 <code>Object.prototype.__proto__</code> 的值为 <code>null</code> 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p><p>最后一张关系图也可以更新为： <img src="https://s2.loli.net/2022/09/06/OQCgRVPMLzbqxG1.png" alt="image.png"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，由对象的<code>__proto__</code>组成的链，也就是蓝色的这条线。</p><p>以上仅自己学习所得，如有不当之处 望指出。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',67),o={href:"https://github.com/mqyqingfeng/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"},t=(0,p.Uk)("JavaScript深入之从原型到原型链"),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",o,[t,(0,p.Wm)(a)])])])],64)}}}}]);