"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9420],{3374:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-146bd85b",path:"/articles/Performance/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B9%8B%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.html",title:"JS事件循环之宏任务和微任务",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"任务队列（Event Queue）",slug:"任务队列-event-queue",children:[]},{level:2,title:"理解微任务和宏任务的执行执行过程",slug:"理解微任务和宏任务的执行执行过程",children:[]},{level:2,title:"Promise 的执行",slug:"promise-的执行",children:[]},{level:2,title:"async/await 的执行",slug:"async-await-的执行",children:[]},{level:2,title:"setTimerout 并不准确",slug:"settimerout-并不准确",children:[]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/Performance/JS事件循环之宏任务和微任务.md",git:{}}},4177:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var t=a(6252);const p=(0,t.uE)('<h1 id="js事件循环之宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#js事件循环之宏任务和微任务" aria-hidden="true">#</a> JS事件循环之宏任务和微任务</h1><p>众所周知，JS 是一门单线程语言，可是浏览器又能很好的处理异步请求，那么到底是为什么呢？</p><p>JS 的执行环境一般是浏览器和 Node.js，两者稍有不同，这里只讨论浏览器环境下的情况。</p><p>JS 执行过程中会产生两种任务，分别是：同步任务和异步任务。</p><ul><li>同步任务：比如声明语句、for、赋值等，读取后依据从上到下从左到右，立即执行。</li><li>异步任务：比如 ajax 网络请求，setTimeout 定时函数等都属于异步任务。异步任务会通过任务队列(Event Queue)的机制（先进先出的机制）来进行协调。</li></ul><h2 id="任务队列-event-queue" tabindex="-1"><a class="header-anchor" href="#任务队列-event-queue" aria-hidden="true">#</a> 任务队列（Event Queue）</h2><p>任务队列中的任务也分为两种，分别是：宏任务（Macro-take）和微任务（Micro-take）</p><ul><li>宏任务主要包括：scrip(JS 整体代码)、setTimeout、setInterval、setImmediate、I/O、UI 交互</li><li>微任务主要包括：Promise(重点关注)、process.nextTick(Node.js)、MutaionObserver</li></ul><p>任务队列的执行过程是：<strong>先执行一个宏任务</strong>，执行过程中如果产出新的宏/微任务，就将他们推入相应的任务队列，<strong>之后在执行一队微任务</strong>，之后再执行宏任务，如此循环。<strong>以上不断重复的过程就叫做 Event Loop(事件循环)</strong>。</p><p>每一次的循环操作被称为<strong>tick</strong>。</p><p><img src="https://pic2.zhimg.com/80/v2-a38ad24f9109e1a4cb7b49cc1b90cafe_720w.jpg" alt=""></p><h2 id="理解微任务和宏任务的执行执行过程" tabindex="-1"><a class="header-anchor" href="#理解微任务和宏任务的执行执行过程" aria-hidden="true">#</a> 理解微任务和宏任务的执行执行过程</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>按照上面的内容，分析执行步骤：</p><ol><li>宏任务：执行整体代码（相当于<code>&lt;script&gt;</code>中的代码）： <ol><li>输出: <code>script start</code></li><li>遇到 setTimeout，加入宏任务队列，当前宏任务队列(setTimeout)</li><li>遇到 promise，加入微任务，当前微任务队列(promise1)</li><li>输出：<code>script end</code></li></ol></li><li>微任务：执行微任务队列（promise1） <ol><li>输出：<code>promise1</code>，then 之后产生一个微任务，加入微任务队列，当前微任务队列（promise2）</li><li>执行 then，输出<code>promise2</code></li></ol></li><li>执行渲染操作，更新界面（敲黑板划重点）。</li><li>宏任务：执行 setTimeout <ol><li>输出：<code>setTimeout</code></li></ol></li></ol><h2 id="promise-的执行" tabindex="-1"><a class="header-anchor" href="#promise-的执行" aria-hidden="true">#</a> Promise 的执行</h2><p><code>new Promise(..)</code>中的代码，也是同步代码，会立即执行。只有<code>then</code>之后的代码，才是异步执行的代码，是一个微任务。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>步骤解析：</strong></p><ul><li>当前任务队列：微任务: [], 宏任务：[<code>&lt;script&gt;</code>]</li></ul><ol><li>宏任务： <ol><li>输出: <code>script start</code></li><li>遇到 timeout1，加入宏任务</li><li>遇到 Promise，输出<code>promise1</code>，直接 resolve，将 then 加入微任务，遇到 timeout2，加入宏任务。</li><li>输出<code>script end</code></li><li>宏任务第一个执行结束</li></ol></li></ol><ul><li>当前任务队列：微任务[then1]，宏任务[timeou1, timeout2]</li></ul><ol><li>微任务： <ol><li>执行 then1，输出<code>then1</code></li><li>微任务队列清空</li></ol></li></ol><ul><li>当前任务队列：微任务[]，宏任务[timeou1, timeout2]</li></ul><ol><li>宏任务： <ol><li>输出<code>timeout1</code></li><li>输出<code>timeout2</code></li></ol></li></ol><ul><li>当前任务队列：微任务[]，宏任务[timeou2]</li></ul><ol start="4"><li>微任务： <ol><li>为空跳过</li></ol></li></ol><ul><li>当前任务队列：微任务[]，宏任务[timeou2]</li></ul><ol start="5"><li>宏任务： <ol><li>输出<code>timeout2</code></li></ol></li></ol><h2 id="async-await-的执行" tabindex="-1"><a class="header-anchor" href="#async-await-的执行" aria-hidden="true">#</a> async/await 的执行</h2><p>async 和 await 其实就是 Generator 和 Promise 的语法糖。</p><p>async 函数和普通 函数没有什么不同，他只是表示这个函数里有异步操作的方法，并返回一个 Promise 对象</p><p>翻译过来其实就是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// async/await 写法</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Promise 写法</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>看例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>步骤解析：</strong></p><ul><li>当前任务队列：宏任务：[<code>&lt;script&gt;</code>]，微任务: []</li></ul><ol><li>宏任务： <ol><li><strong>输出：</strong><code>async1 start</code></li><li>遇到 async2，<strong>输出：</strong><code>async2</code>，并将 then（async1 end）加入微任务</li><li>遇到 setTimeout，加入宏任务。</li><li>遇到 Promise，<strong>输出：</strong><code>promise1</code>，直接 resolve，将 then(promise2)加入微任务</li><li><strong>输出：</strong><code>script end</code></li></ol></li></ol><ul><li>当前任务队列：微任务[promise2, async1 end]，宏任务[timeout]</li></ul><ol start="2"><li>微任务： <ol><li><strong>输出：</strong><code>promise2</code></li><li>promise2 出队</li><li><strong>输出：</strong><code>async1 end</code></li><li>async1 end 出队</li><li>微任务队列清空</li></ol></li></ol><ul><li>当前任务队列：微任务[]，宏任务[timeout]</li></ul><ol start="3"><li>宏任务： <ol><li><strong>输出：</strong><code>timeout</code></li><li>timeout 出队，宏任务清空</li></ol></li></ol><p><strong>注意：任务队列（宏任务和微任务）是栈（Stack）结构，执行时遵循先进后出（LIFO） 的原则</strong></p><h2 id="settimerout-并不准确" tabindex="-1"><a class="header-anchor" href="#settimerout-并不准确" aria-hidden="true">#</a> setTimerout 并不准确</h2><p>由上我们已经知道了 setTimeout 是一个宏任务，会被添加到宏任务队列当中去，按顺序执行，如果前面有。</p><p><strong>setTimeout() 的第二个参数是为了告诉 JavaScript 再过多长时间把当前任务添加到队列中。</strong></p><p>如果队列是空的，那么添加的代码会立即执行；如果队列不是空的，那么它就要等前面的代码执行完了以后再执行。</p><p>看代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;while&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>因为then是一个微任务，会先于setTimeout执行，所以，虽然setTimeout是在两秒后加入的宏任务，但是因为then中的在while操作被延迟了4s，所以一直推迟到了4s秒后才执行的setTimeout。</p><p>所以输出的顺序是：script start、promise、script end、then1。 四秒后输出：while、timeout</p><p>注意：关于 setTimeout 要补充的是，即便主线程为空，0 毫秒实际上也是达不到的。根据 HTML 的标准，最低是 4 毫秒。有兴趣的同学可以自行了解。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>有个小 tip：从规范来看，microtask 优先于 task 执行，所以如果有需要优先执行的逻辑，放入 microtask 队列会比 task 更早的被执行。</p><p>最后的最后，记住，JavaScript 是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',57),e={href:"https://zhuanlan.zhihu.com/p/87684858",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("知乎-【JS】深入理解事件循环,这一篇就够了!(必看)"),c={href:"https://juejin.im/book/6844733750048210957/section/6844733750115303432",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("掘金小册-前端性能优化-Event Loop 与异步更新策略"),u={href:"https://segmentfault.com/a/1190000014940904",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("Segmentfault-译文：JS 事件循环机制（event loop）之宏任务、微任务"),r={href:"https://zh.javascript.info/event-loop",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Uk)("现代JavaScript-事件循环"),b={href:"https://mp.weixin.qq.com/s?__biz=MzA4Nzg0MDM5Nw==&mid=2247486568&idx=1&sn=91f3fde0aa78c134a16c4b0054ebc058&chksm=90320f8aa745869c19f2b0beb1fc886e160eacf0cc14b719c653ff456a0bb467c6e44e5c09c1&mpshare=1&scene=1&srcid=0910nzUOwvfbNR5EuDA5jkIs&sharer_sharetime=1599700920750&sharer_shareid=68eb5b2b3e4592fb6bbcbd3555f71d06&key=6664ac14267ba668dd7a9b3568fb19fc1a9d077d8bf208be893b1f93a7ed6f92a9a65754ef98a7eceafae90d0c9cee233bdfb783029046af129e7ea6bca7c67c7b7784173f389412ef9eec2dc302f904bcde9474621957b8673b576ff5096afcfe087afe60ab7b10a6e88f3898b8c9d47bfd7fa2de7bc3e80a353ab2011c0b1a&ascene=1&uin=MjY5MTk2ODkxOQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A1QngDpbd7oBvzKd78v7Ikk%3D&pass_ticket=CyghTbXdqVMYt3zerRhF2HxsE7Eo4g3TxIWpRfYzWvvAtCpvyt6Ex0D4718Fhi%2FR&wx_header=0",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("这一次，彻底弄懂 JavaScript 执行机制"),m={href:"https://mp.weixin.qq.com/s?__biz=MzA4ODUzNTE2Nw==&mid=2451049376&idx=1&sn=2ab8d83f92b710bd6bf5da0c64cf3e21&chksm=87c412b0b0b39ba6d0ab06f0b26b1ced5cb35dd7c44bb4309aa05bafc0b4e354ed41997eff7f&mpshare=1&scene=1&srcid=09103ic17JhVKBc8J44uJvZB&sharer_sharetime=1599699680888&sharer_shareid=68eb5b2b3e4592fb6bbcbd3555f71d06&key=82003248020682faeafe66402d47658ff652fa14a8cbd6e827e9cd96549ae65bb893329ffeac5b794e0819eec65acc440d922288d5f72a3b3875cc3cd8eaeae9862d98cfcc056321f4acf4a3130b42bedb166d95d5e136673958adeadf0e6870638e90bdc968428e0151acc9aa91f31c7b482b8a6215cae8edf475f408faf435&ascene=1&uin=MjY5MTk2ODkxOQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A2iEX7bxzZv29Cbl2TuTJFw%3D&pass_ticket=CyghTbXdqVMYt3zerRhF2HxsE7Eo4g3TxIWpRfYzWvvAtCpvyt6Ex0D4718Fhi%2FR&wx_header=0",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("面试一定会问到的-js 事件循环"),g=(0,t.Uk)("我的博客即将同步至腾讯云+社区，邀请大家一同入驻："),h={href:"https://cloud.tencent.com/developer/support-plan?invite_code=1kwb337lp0hrr",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("https://cloud.tencent.com/developer/support-plan?invite_code=1kwb337lp0hrr"),y={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",c,[l,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",u,[i,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",r,[k,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",b,[d,(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t._)("a",m,[f,(0,t.Wm)(a)])])]),(0,t._)("p",null,[g,(0,t._)("a",h,[v,(0,t.Wm)(a)])])],64)}}}}]);