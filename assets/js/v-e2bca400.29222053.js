"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[225],{1450:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-e2bca400",path:"/articles/JavaScript/%E6%88%91%E5%AF%B9JavaScript%E4%B8%ADthis%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3.html",title:"我对JavaScript中this的一些理解",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"this 是什么",slug:"this-是什么",children:[]},{level:2,title:"this 指向的四种情况",slug:"this-指向的四种情况",children:[{level:3,title:"1. 全局的函数调用，this指向window",slug:"_1-全局的函数调用-this指向window",children:[]},{level:3,title:"2. 作为对象方法的调用，this指向该对象",slug:"_2-作为对象方法的调用-this指向该对象",children:[]},{level:3,title:"3. 作为构造函数调用，this指向实例",slug:"_3-作为构造函数调用-this指向实例",children:[]},{level:3,title:"4. 使用call/apply/bind调用, this指向第一个参数",slug:"_4-使用call-apply-bind调用-this指向第一个参数",children:[]}]},{level:2,title:"深入理解",slug:"深入理解",children:[]}],filePathRelative:"articles/JavaScript/我对JavaScript中this的一些理解.md",git:{}}},4076:(n,s,a)=>{a.r(s),a.d(s,{default:()=>B});var p=a(6252);const t=(0,p.uE)('<h1 id="我对javascript中this的一些理解" tabindex="-1"><a class="header-anchor" href="#我对javascript中this的一些理解" aria-hidden="true">#</a> 我对JavaScript中this的一些理解</h1><p>因为日常工作中经常使用到<code>this</code>，而且在JavaScript中<code>this</code>的指向问题也很容易让人混淆一部分知识。<br> 这段时间翻阅了一些书籍也查阅了网上一些资料然后结合自己的经验，为了能让自己更好的理解<code>this</code>，进而总结一篇文章。</p><h2 id="this-是什么" tabindex="-1"><a class="header-anchor" href="#this-是什么" aria-hidden="true">#</a> this 是什么</h2><p><code>this</code>是 JavaScript 语言的一个关键字。它是函数运行时，在函数体内部自动生成的一个对象，只能在函数体内部使用。<br> 实际是在函数被调用时才发生的绑定，也就是说<code>this</code>具体指向什么，取决于你是怎么调用的函数。</p><h2 id="this-指向的四种情况" tabindex="-1"><a class="header-anchor" href="#this-指向的四种情况" aria-hidden="true">#</a> this 指向的四种情况</h2><p>这四种情况基本涵盖了JavaScript中常见的<code>this</code>指向问题</p><h3 id="_1-全局的函数调用-this指向window" tabindex="-1"><a class="header-anchor" href="#_1-全局的函数调用-this指向window" aria-hidden="true">#</a> 1. 全局的函数调用，this指向window</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种 情况下的<code>this</code>其实就是<code>window</code>对象，这个很好理解。 但是还有一种情况，就是匿名函数的<code>this</code>也会指向<code>window</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object</span>\n\t<span class="token operator">+</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment">//window</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',10),e=(0,p.Uk)("匿名函数的执行环境具有全局性，因此它的"),o=(0,p._)("code",null,"this",-1),c=(0,p.Uk)("对象通常指向windows。"),l=(0,p._)("br",null,null,-1),i=(0,p.Uk)(" 如果对此有疑惑，可以看知乎上的答案："),u={href:"https://www.zhihu.com/question/21958425",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("知乎 - 匿名函数的this指向为什么是window?"),k=(0,p.uE)('<h3 id="_2-作为对象方法的调用-this指向该对象" tabindex="-1"><a class="header-anchor" href="#_2-作为对象方法的调用-this指向该对象" aria-hidden="true">#</a> 2. 作为对象方法的调用，this指向该对象</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token string">&#39;window&#39;</span>\n<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当函数作为某个对象的方法调用时，<code>this</code>就指这个函数所在的对象。</p><h3 id="_3-作为构造函数调用-this指向实例" tabindex="-1"><a class="header-anchor" href="#_3-作为构造函数调用-this指向实例" aria-hidden="true">#</a> 3. 作为构造函数调用，this指向实例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',5),d=(0,p.Uk)("构造函数中的"),b=(0,p._)("code",null,"this",-1),h=(0,p.Uk)("，在通过"),m=(0,p._)("code",null,"new",-1),f=(0,p.Uk)("之后会生成一个新对象，this就指这个新对象。"),v=(0,p._)("br",null,null,-1),w=(0,p.Uk)(" 对"),g=(0,p._)("code",null,"new",-1),j=(0,p.Uk)("有疑问的话，可以看 "),y={href:"https://github.com/mqyqingfeng/Blog/issues/13",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("冴羽的博客 JavaScript深入之new的模拟实现 "),x=(0,p.uE)('<h3 id="_4-使用call-apply-bind调用-this指向第一个参数" tabindex="-1"><a class="header-anchor" href="#_4-使用call-apply-bind调用-this指向第一个参数" aria-hidden="true">#</a> 4. 使用call/apply/bind调用, this指向第一个参数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;boj1&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;obj2&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj3<span class="token operator">=</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;obj3&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// apply</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#39;obj1&#39;</span>\n<span class="token comment">// call</span>\n<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#39;obj2&#39;</span>\n<span class="token comment">// bind</span>\n<span class="token keyword">var</span> fnBind<span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fnBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#39;obj3&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>call/ apply / bind </code>都有一个共同的特点，就是改变<code>this</code>的指向，使用这种方法可以把别人的方法拿过来用到自己身上。</p><p>第一个参数为 <code>null</code> 的时候，视为指向 <code>window</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">&#39;window&#39;</span>\n<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token string">&#39;boj&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#39;window&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这里如果是<code>obj.fn()</code>调用的<code>fn()</code>方法，<code>this</code>应该指向<code>obj</code>没错。 但是因为<code>call(null)</code>的存在，改变了指向，所以<code>this</code>指向了<code>window</code>。</p><h2 id="深入理解" tabindex="-1"><a class="header-anchor" href="#深入理解" aria-hidden="true">#</a> 深入理解</h2><p>正因为比较难理解，所以<code>this</code>指向也是面试时最容易遇到的问题，比如下面这道我曾遇到的一个面试题：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  length<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>\n    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2 这里的this指向的arguments，所以获取的是arguments.length</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这道题里，不仅考察了对<code>this</code>熟悉程度，还考察了函数的传参形式、作用域、以及<code>arguments</code>这种特殊的数组的理解。<br> 只有真正理解了这些才能正确的判断<code>this</code>究竟指向了谁。<br> 所以，只有对<code>JavaScript</code>中的各项知识点深入理解，才会对<code>this</code>的概念越加清晰。</p><p>参考：</p>',11),J={href:"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html",target:"_blank",rel:"noopener noreferrer"},S=(0,p.Uk)("阮一峰 - Javascript 的 this 用法"),U={href:"http://caibaojian.com/deep-in-javascript-this.html",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("前端开发博客 - 深入理解JavaScript this"),B={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,o,c,l,i,(0,p._)("a",u,[r,(0,p.Wm)(a)])]),k,(0,p._)("p",null,[d,b,h,m,f,v,w,g,j,(0,p._)("a",y,[_,(0,p.Wm)(a)])]),x,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",J,[S,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",U,[E,(0,p.Wm)(a)])])])],64)}}}}]);