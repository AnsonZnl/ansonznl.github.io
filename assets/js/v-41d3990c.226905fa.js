"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3370],{4525:(e,n,s)=>{s.r(n),s.d(n,{data:()=>l});const l={key:"v-41d3990c",path:"/computer-base/LeetCode/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目描述",slug:"题目描述",children:[]},{level:2,title:"解法",slug:"解法",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"computer-base/LeetCode/买卖股票的最佳时机.md",git:{}}},7442:(e,n,s)=>{s.r(n),s.d(n,{default:()=>d});var l=s(6252);const a=(0,l.uE)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p>示例 1：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：[7,1,5,3,6,4]\n输出：5\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>示例 2：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>提示：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1 &lt;= prices.length &lt;= 105\n0 &lt;= prices[i] &lt;= 104\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',10),r=(0,l.Uk)("题目链接："),t={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"},i=(0,l.Uk)("买卖股票的最佳时机"),p=(0,l.uE)('<h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法" aria-hidden="true">#</a> 解法</h2><p><strong>思路：</strong></p><ol><li>和上面的差不多，不过是一边 for 的时候做 diff 判断</li><li>无 diff 去 set</li><li>有 diff 判断即可</li></ol><p><strong>复杂度</strong></p><ol><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>动态规划 没啥可说</p>',7),d={render:function(e,n){const s=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[a,(0,l._)("p",null,[r,(0,l._)("a",t,[i,(0,l.Wm)(s)])]),p],64)}}}}]);