"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3831],{6352:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4beec409",path:"/articles/JavaScript/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8setTimeout%E6%A8%A1%E6%8B%9FsetInterval%EF%BC%9F.html",title:"为什么要用 setTimeout 模拟 setInterval ？",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"推入任务队列后的时间不准确",slug:"推入任务队列后的时间不准确",children:[]},{level:2,title:"函数操作耗时过长导致的不准确",slug:"函数操作耗时过长导致的不准确",children:[]},{level:2,title:"setInterval 缺点 与 setTimeout 的不同",slug:"setinterval-缺点-与-settimeout-的不同",children:[]},{level:2,title:"setTimeout 模拟 setInterval",slug:"settimeout-模拟-setinterval",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/JavaScript/为什么要用setTimeout模拟setInterval？.md",git:{}}},5623:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(6252);const t=(0,p._)("h1",{id:"为什么要用-settimeout-模拟-setinterval",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#为什么要用-settimeout-模拟-setinterval","aria-hidden":"true"},"#"),(0,p.Uk)(" 为什么要用 setTimeout 模拟 setInterval ？")],-1),e=(0,p.Uk)("在"),o=(0,p.Uk)("JS 事件循环之宏任务和微任务"),c=(0,p.Uk)("中讲到过，setInterval 是一个宏任务。"),l=(0,p.uE)('<p>用多了你就会发现它并不是准确无误，极端情况下还会出现一些令人费解的问题。</p><p>下面我们一一罗列..</p><h2 id="推入任务队列后的时间不准确" tabindex="-1"><a class="header-anchor" href="#推入任务队列后的时间不准确" aria-hidden="true">#</a> 推入任务队列后的时间不准确</h2><p>定时器代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面这句代码的意思其实是<strong>fn()将会在 N 秒之后被推入任务队列</strong>。</p><p>所以，在 setInterval 被推入任务队列时，如果在它前面有很多任务或者某个任务等待时间较长比如网络请求等，那么这个定时器的执行时间和我们预定它执行的时间可能并不一致。</p><p>比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">//耗时任务</span>\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count<span class="token operator">++</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    <span class="token string">&quot;与原设定的间隔时差了：&quot;</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>startTime <span class="token operator">+</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;毫秒&quot;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出：</span>\n<span class="token comment">// 与原设定的间隔时差了： 699 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 771 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 887 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 981 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 1142 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 1822 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 1891 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 2001 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 2748 毫秒</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>可以看出来，相差的时间是越来越大的，越来越不准确。</p><h2 id="函数操作耗时过长导致的不准确" tabindex="-1"><a class="header-anchor" href="#函数操作耗时过长导致的不准确" aria-hidden="true">#</a> 函数操作耗时过长导致的不准确</h2><p>考虑极端情况，假如定时器里面的代码需要进行大量的计算(耗费时间较长)，或者是 DOM 操作。这样一来，花的时间就比较长，有可能前一次代码还没有执行完，后一次代码就被添加到队列了。也会到时定时器变得不准确，甚至出现同一时间执行两次的情况。</p><p>最常见的出现的就是，当我们需要使用 ajax 轮询服务器是否有新数据时，必定会有一些人会使用 setInterval，然而无论网络状况如何，它都会去一遍又一遍的发送请求，最后的间隔时间可能和原定的时间有很大的出入。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 做一个网络轮询，每一秒查询一次数据。</span>\n<span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设的网络延迟</span>\n    count<span class="token operator">++</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;与原设定的间隔时差了：&quot;</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>startTime <span class="token operator">+</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;毫秒&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n输出：\n<span class="token comment">// 与原设定的间隔时差了： 567 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 552 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 563 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 554 毫秒(2次)</span>\n<span class="token comment">// 与原设定的间隔时差了： 564 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 602 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 573 毫秒</span>\n<span class="token comment">// 与原设定的间隔时差了： 633 毫秒</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="setinterval-缺点-与-settimeout-的不同" tabindex="-1"><a class="header-anchor" href="#setinterval-缺点-与-settimeout-的不同" aria-hidden="true">#</a> setInterval 缺点 与 setTimeout 的不同</h2><blockquote><p>再次强调，定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，取决于何时被主线程的事件循环取到，并执行。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span>\n<span class="token comment">//即：每隔N秒把function事件推到消息队列中</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/730a96f90311403980e1e42c2d5d21c6~tplv-k3u1fbpfcp-zoom-1.image" alt="setinterval-1.png"></p><p>上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了 100ms，T2 定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，<strong>但由于此时 T2 还在队列中，所以 T3 不会被添加（T3 被跳过）</strong>，结果就是此时被跳过；这里我们可以看到，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器的效果。</p><p>综上所述，setInterval 有两个缺点：</p><ul><li>使用 setInterval 时，某些间隔会被跳过；</li><li>可能多个定时器会连续执行；</li></ul><p>可以这么理解：<strong>每个 setTimeout 产生的任务会直接 push 到任务队列中；而 setInterval 在每次把任务 push 到任务队列前，都要进行一下判断(看上次的任务是否仍在队列中，如果有则不添加，没有则添加)。</strong></p><p>因而我们一般用 setTimeout 模拟 setInterval，来规避掉上面的缺点。</p><p>来看一个经典的例子来说明他们的不同：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>做过的朋友都知道：是一次输出了 5 个 5;<br> 那么问题来了：是每隔 1 秒输出一个 5 ？还是一秒后立即输出 5 个 5？<br> 答案是：一秒后立即输出 5 个 5<br> 因为 for 循环了五次，所以 setTimeout 被 5 次添加到时间循环中，等待一秒后全部执行。</p><p><strong>为什么是一秒后输出了 5 个 5 呢？</strong><br> 简单来说，因为 for 是主线程代码，先执行完了，才轮到执行 setTimeout。</p><p>当然为什么输出不是 1 到 5，这个涉及到作用域的问题了，这里就不解释了。</p><h2 id="settimeout-模拟-setinterval" tabindex="-1"><a class="header-anchor" href="#settimeout-模拟-setinterval" aria-hidden="true">#</a> setTimeout 模拟 setInterval</h2><p>综上所述，在某些情况下，setInterval 缺点是很明显的，为了解决这些弊端，可以使用 settTimeout() 代替。</p><ul><li>在前一个定时器执行完前，不会向队列插入新的定时器（解决缺点一）</li><li>保证定时器间隔（解决缺点二）</li></ul><p>具体实现如下：</p><p>1.写一个 interval 方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token function">interval</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token function-variable function">interv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>interv<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    timer<span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>interv<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.和 setInterval() 一样使用它</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">interval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3.终止定时器</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span><span class="token function">clearSetTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',39),u={href:"https://blog.csdn.net/b954960630/article/details/82286486",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("为什么要用 setTimeout 模拟 setInterval ？"),r={href:"https://blog.csdn.net/qq_34690340/article/details/87162561",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("用 settTimeout()代替 setInterval()"),m={render:function(n,s){const a=(0,p.up)("RouterLink"),m=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p.Wm)(a,{to:"/articles/Performance/JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B9%8B%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1.html"},{default:(0,p.w5)((()=>[o])),_:1}),c]),l,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",u,[i,(0,p.Wm)(m)])]),(0,p._)("li",null,[(0,p._)("a",r,[k,(0,p.Wm)(m)])])])],64)}}}}]);