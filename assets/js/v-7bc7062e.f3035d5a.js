"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3027],{9397:(e,l,o)=>{o.r(l),o.d(l,{data:()=>d});const d={key:"v-7bc7062e",path:"/articles/Vue/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Vue知识总结",slug:"vue知识总结",children:[]},{level:2,title:"基础知识",slug:"基础知识",children:[]},{level:2,title:"Vue组件",slug:"vue组件",children:[]},{level:2,title:"过渡 & 动画",slug:"过渡-动画",children:[]},{level:2,title:"可复用性 & 组合",slug:"可复用性-组合",children:[]},{level:2,title:"渲染函数 & JSX",slug:"渲染函数-jsx",children:[]},{level:2,title:"插件",slug:"插件",children:[]},{level:2,title:"过滤器",slug:"过滤器",children:[]},{level:2,title:"构建 & 部署",slug:"构建-部署",children:[]}],filePathRelative:"articles/Vue/Vue知识点总结.md",git:{}}},4569:(e,l,o)=>{o.r(l),o.d(l,{default:()=>z});var d=o(6252),c=o(3577);const i=(0,d._)("h2",{id:"vue知识总结",tabindex:"-1"},[(0,d._)("a",{class:"header-anchor",href:"#vue知识总结","aria-hidden":"true"},"#"),(0,d.Uk)(" Vue知识总结")],-1),t=(0,d._)("h2",{id:"基础知识",tabindex:"-1"},[(0,d._)("a",{class:"header-anchor",href:"#基础知识","aria-hidden":"true"},"#"),(0,d.Uk)(" 基础知识")],-1),n=(0,d.uE)("<li>vue的生命周期： <code>beforeCreate/created</code>、<code>beforeMount/mounted</code>、<code>beforeUpdate/updated</code>、<code>beforeDestory/destoryed</code></li><li>vue常用指令： <code>v-for</code>、<code>v-bind</code>（缩写形式<code>:prop</code>）、<code>v-on</code>(缩写形式<code>@click=’sss&#39;</code>)、<code>v-if/v-else/v-else-if</code>、<code>v-model</code>、<code>v-once</code>、<code>v-html</code>、<code>v-show</code>...</li>",2),r=(0,d.Uk)("vue自定义组件："),a=(0,d.uE)("<li>vue常用实例方法和属性: <code>data/$data</code>、<code>methods/$methods</code>、<code>$el</code>、<code>computed</code>(计算属性)、<code>$watch</code>、<code>$set</code>、<code>$event</code>、<code>$emit</code>...</li><li>如果需要更新的属性需要缓存，则使用计算属性的方式，否则可以使用<code>methods</code>里的方法来更新属性（<code>methods</code>里的方法每次重新渲染都会执行）</li><li>计算属性默认提供了<code>getter</code>，你还可以给它设置<code>setter</code></li><li>当你数据变化是异步或者开销较大时，可以使用<code>watch</code>侦听器来响应数据的变化</li><li><code>v-bind:class</code>的值可以是一个对象，可实现类似<code>react</code>中<code>classnames</code>模块的功能</li><li>自定义组件上的<code>class</code>会被渲染拼接到<code>template</code>的根节点的<code>class</code>属性上（自定义组件上可使用<code>v-bind:class</code>来做class的判断显示逻辑）</li><li><code>v-bind:style</code>可以用来绑定内联样式，这个内联样式的值可以由一个对象来定义（类似css in js的模式）,且可以被定义为数组(多个样式对象)</li><li><code>v-bind:style</code>可以使用多重值的形式：<code>&lt;div :style=“display:[‘-webkit-box’,’-ms-flexbox’, ‘flex&#39;]&quot;&gt;&lt;/div&gt;</code></li><li><code>v-if/v-else/v-else-if</code>的时候，可以用key来管理可复用的元素</li><li><code>v-if</code>是’真正’的渲染，它会确保在切换条件过程中条件块内的元素的事件监听器和子组件适时的销毁和重建</li><li><code>v-if</code>是惰性的，初始为假，什么也不做，直到为真的时候才渲染元素</li><li><code>v-show</code>总是渲染元素，只是简单的进行切换</li><li><code>v-if</code>的切换开销大，<code>v-show</code>则是初始渲染开销大，频繁切换使用<code>v-show</code>，运行时经常改变则使用<code>v-if</code></li><li><code>v-if</code>和<code>v-for</code>一起使用时，<code>v-for</code>的优先级更高</li><li><code>v-for</code>可遍历数组，第二个参数是索引</li><li><code>v-for</code>可遍历对象，第二个参数是<code>key</code>，第三个参数是索引</li><li><code>v-for</code>和<code>&lt;template&gt;</code>搭配可减少渲染次数</li><li><code>v-for</code>和自定义组件使用时，需要使用<code>props</code>来传递值</li><li>尽可能的为遍历子元素加上<code>key</code>，获得渲染优化</li><li>数组变异方法：<code>push/pop/unshift/shift/splice/sort/reverse</code>改变原始数组</li><li>数组非变异方法：<code>filter/concat/slice</code> 不改变原始数组，总是返回新数组</li><li>Vue不能检测到数组索引赋值（使用<code>vm.$set</code>解决）和修改<code>length</code>长度赋值(使用<code>splice</code>解决)的情况</li><li>Vue不能检测对象属性的添加和删除(使用<code>vm.$set</code>或<code>Object.assign</code>)</li><li><code>is=“todo-item”</code>这种属性的写法比较适合DOM模板</li><li>事件修饰符，它们可串联使用：<code>.stop</code>、<code>.prevent</code>、<code>.capture</code>、<code>.self</code>、<code>.once</code>、<code>.passive</code>(尤其适合移动端)</li><li><code>.passive</code>不用同时和<code>.prevent</code>使用，后者会被忽略</li><li>按键修饰符: <code>.enter</code>、<code>.tab</code>、<code>.delete</code>、<code>.esc</code>、<code>.space</code>、<code>.up</code>、<code>.down</code>、<code>.left</code>、<code>.right</code></li><li>系统按键修饰符:<code>.ctrl</code>、<code>.alt</code>、<code>.shift</code>、<code>.meta(⌘|⊞|◆)</code>、<code>.exact</code>(允许精确控制系统修饰符组合键触发)</li><li>鼠标修饰符： <code>.left</code>、<code>.right</code>、<code>.middle</code></li><li><code>v-model</code>会忽略表单元素的<code>value</code>、<code>checked</code>、<code>selected</code>，仅仅使用实例中的数据作为数据源</li><li>表单事件修饰符：<code>.lazy</code>、<code>.number</code>、<code>.trim</code></li><li>组件是可复用的vue实例，具有vue实例大多数属性和方法</li><li>组件可复用，每个组件有独立的空间</li><li>组件上的data必须是一个函数，这样做避免影响了其他组件</li><li>通过<code>Vue.component()</code>全局注册的组件可在其被注册后的任何通过<code>new Vue()</code>创建的实例所使用，包含其组件树中的所有组件</li><li>通过插槽<code>&lt;slot&gt;</code>分发内容(其实就是类似于react的children)</li><li>动态组件<code>&lt;component&gt;</code>配合属性<code>is</code>来实现</li><li>解析DOM模板时需要注意下可能会有不生效的情况，需要使用is来传递组件</li>",38),s=(0,d.uE)('<h2 id="vue组件" tabindex="-1"><a class="header-anchor" href="#vue组件" aria-hidden="true">#</a> Vue组件</h2><ul><li><p>全局注册/局部注册</p></li><li><p>局部注册组件在子组件中不可用</p></li><li><p>全局注册的行为必须在根Vue实例创建之前发生</p></li><li><p><code>camelCase</code>的属性可以在组件中使用<code>kebab-case</code></p></li><li><p>可以以对象的模式指定每一个<code>props</code>属性的类型</p></li><li><p>父级<code>props</code>的更新会向下流动，反之则不行</p></li><li><p>由于JavaScript对象和数组是引用传入的，所以当子组件对props的改变将会影响到父组件</p></li><li><p>props类型校验可以是原生构造对象的中的任意一个，也可以自定义检验类型，通过<code>instanceof</code>检查</p></li><li><p>对于绝大多数特性来说，外部传入的值会替换掉组件内部设置好的值，如input的type属性，但有的属性则是会进行合并，如class</p></li><li><p><code>inhertAttrs:false</code>设置不希望根元素继承特性，可以使用<code>$attrs</code>属性来设置继承的目标元素</p></li><li><p><code>v-on</code>在设置事件监听器时，会把事件名全部转换成小写，推荐始终使用<code>kebab-case</code>的事件名</p></li><li><p><code>v-model</code>可以使用自定义组件中的<code>model</code>属性自定义</p></li><li><p>父组件模板的所有东西都会在父级作用域内编译，子组件的所有内容都会在子组件作用域内编译</p></li><li><p>插槽(<code>&lt;slot&gt;&lt;/slot&gt;</code>)/具名插槽(<code>&lt;slot name=“header&quot;&gt;&lt;/slot&gt;</code>)/作用域插槽(<code>slot/slot-scope</code>)</p></li><li><p><code>&lt;keep-alive&gt;</code>组件可用来缓存被切换后隐藏的组件的状态</p></li><li><p><code>$root</code>访问根实例，<code>$parent</code>访问父组件实例(不推荐)</p></li><li><p>父组件访问子组件，使用<code>$refs</code>属性来获取设置了<code>ref</code>属性的子组件</p></li><li><p><code>provide</code>属性允许我们指定要分享给后代组件使用的方法，然后后代组件使用<code>inject</code>属性来获得祖先组件分享的方法(依赖注入)</p></li><li><p>事件侦听器（<code>$emit</code>派发的事件）</p><ul><li><code>v-on</code> 指令侦听</li><li><code>$on</code> 侦听一个事件</li><li><code>$once</code> 一次性侦听一个事件</li><li><code>$off</code> 停止侦听一个事件</li></ul></li><li><p>慎用递归组件</p></li><li><p>尽量避免组件的循环引用</p></li><li><p>优先使用<code>template</code>来定义模板，而不是<code>inline-template</code></p></li><li><p><code>$forceUpdate</code>来强制更新view</p></li><li><p>组件包含大量静态内容时，可使用<code>v-once</code>来标记，缓存静态内容</p></li></ul><h2 id="过渡-动画" tabindex="-1"><a class="header-anchor" href="#过渡-动画" aria-hidden="true">#</a> 过渡 &amp; 动画</h2><ul><li><p><code>transition</code>组件控制过渡动画，可以给任何元素和组件添加进入/离开过渡</p></li><li><p>当插入或删除<code>transition</code>中的元素时，vue会做如下处理</p><ul><li>自动嗅探元素是否使用了css过渡和动画，适当时机添加/删除类名</li><li>元素的钩子函数会在适当时机被调用</li><li>元素既没有钩子函数也没有css动画，插入和删除操作在下一帧立即执行（浏览器逐帧动画机制）</li></ul></li><li><p>过渡的类名</p><ul><li><code>v-enter/v-enter-active/v-enter-to</code></li><li><code>v-leave/v-leave-active/v-leave-to</code></li></ul></li><li><p>css动画用法同css过渡，区别是类名<code>v-enter</code>不会在DOM插入后立即删除，而是在<code>animationend</code>事件触发时删除</p></li><li><p>自定义过渡类名，使用以下属性指定:</p><ul><li><code>enter-class/enter-active-class/enter-to-class</code></li><li><code>leave-class/leave-active-class/leave-to-class</code></li><li>自定义类名优先级高于普通的类名</li></ul></li><li><p>使用<code>typ</code>e属性设置<code>transition</code>或<code>animation</code>来申明vue使用的动画类型</p></li><li><p><code>transition</code>组件上使用<code>duration</code>来设置动画执行的时间</p></li><li><p>可以使用钩子函数</p><ul><li><code>beforeEnter/enter/afterEnter/enterCancelled</code></li><li><code>beforeLeave/leave/afterLeave/leaveCancelled</code></li><li>钩子函数使用<code>v-on</code>指令绑定</li><li>钩子和结合过渡和动画使用，也可以单独使用</li><li>在<code>enter/leave</code>中，必须使用<code>done()</code>来进行回调，否则会同步调用，过渡或动画会立即完成</li><li>对于纯使用JavaScript来进行的动画，推荐使用<code>v-bind:css=“false”</code>来取消css的检测，减少css的影响</li></ul></li><li><p>可使用<code>apear</code>设置初始渲染的过渡</p><ul><li><code>apear/apear-active/apear-to</code></li><li><code>beforeApear/apear/afterApear/apearCancelled</code></li></ul></li><li><p>多元素过渡，设置唯一<code>key</code></p></li><li><p>过渡模式:</p><ul><li><code>In-out</code> 新元素先过渡，完成后当前元素过渡离开</li><li><code>out-in</code> 当前元素先过渡，完成后新元素过渡进入</li><li><code>默认行为</code>：进入和离开同时发生</li></ul></li><li><p>多个组件过渡使用动态组件实现</p></li><li><p>列表过渡 <code>&lt;transition-group&gt;</code></p><ul><li>以真实元素呈现，默认为<code>&lt;span&gt;</code>，可使用tag更改呈现标签</li><li>过渡模式不可用</li><li>内部需要唯一<code>key</code></li></ul></li><li><p>列表排序过渡，使用的是<code>FLIP</code>动画，使用类名<code>v-move</code>来定义class</p></li></ul><h2 id="可复用性-组合" tabindex="-1"><a class="header-anchor" href="#可复用性-组合" aria-hidden="true">#</a> 可复用性 &amp; 组合</h2><ul><li><p><code>mixins</code>混入属性发生冲突时，以组件数据优先（一层属性深度浅合并）</p></li><li><p><code>mixins</code>混入方法发生冲突时，会将函数合并为一个数组，优先执行混入方法，其次执行组件方法</p></li><li><p><code>Vue.extend</code>策略和<code>mixins</code>相同</p></li><li><p>慎用全局混入</p></li><li><p>合并策略可以自定义（参考<code>vuex</code>的具体实现：<code>Vue.config.optionMergeStrategies</code>）</p></li><li><p>全局自定义指令：<code>Vue.directive()</code></p></li><li><p>局部自定义指令：属性<code>directives</code>，类型为<code>Object</code></p></li><li><p>钩子函数</p><ul><li><strong>bind</strong> 指令第一次绑定到元素时调用，只执行一次，可用于一次性初始化设置</li><li><strong>inserted</strong> 元素插入父节点时调用</li><li><strong>update</strong> 所有VNode更新时调用，可能发生在子<em>VNode</em>之前</li><li><strong>componentUpdated</strong> 指令所在组件在<em>VNode</em>和其子<em>VNode</em>更新后调用</li><li><strong>unbind</strong> 指令与元素解绑时调用</li></ul></li><li><p>钩子函数都会被传入以下参数：</p><ul><li><strong>el</strong> 指令绑定元素，可操作DOM</li><li><strong>binding</strong> 指令描述对象</li><li><strong>vnode</strong> Vue生成的虚拟节点</li><li><strong>oldVnode</strong> 上一个<code>Vnode</code>，仅在<code>update</code>和<code>componentUpdated</code>中使用</li></ul></li><li><p>指令接受所有合法的JavaScript表达式</p></li></ul><h2 id="渲染函数-jsx" tabindex="-1"><a class="header-anchor" href="#渲染函数-jsx" aria-hidden="true">#</a> 渲染函数 &amp; JSX</h2><ul><li><code>render</code>函数接受<code>createElement</code>方法作为参数</li><li><code>createElement</code>方法的作用是创建一个虚拟节点(VNode)</li><li><code>createElement</code>参数比较复杂，参照官网：参数</li><li>组件树中的<code>VNodes</code>必须唯一</li><li>render中的<code>v-if/v-for</code>可以使用<code>if/else</code>和<code>map</code>重写</li><li>插槽使用<code>this.$slot.default</code>访问，作用域插槽使用<code>this.$scopeSlots.default</code>访问和设置</li><li>可以使用插件<code>babel-plugin-transform-vue-jsx</code>支持JSX语法</li><li>将h作为<code>createElement</code>的别名是Vue生态的一个惯例，也是JSX要求的</li><li>函数式组件 关键词：functional</li><li>函数式组件渲染开销低，但相应的，它不会出现在Vue devtools的组件树里边</li><li>函数式组件要求你自己实现同名特性的替换与智能合并</li><li>Vue的模板实际编译成了<code>render</code>方法实现的<code>VNode</code>，可以使用<code>Vue.compile()</code>方法来输出编译结果</li></ul><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2>',9),u=(0,d._)("p",null,"插件会为vue提供全局的功能，包括但不限于以下几种：",-1),p=(0,d.Uk)("添加全局的属性或方法，如"),v={href:"https://github.com/karol-f/vue-custom-element",target:"_blank",rel:"noopener noreferrer"},h=(0,d.Uk)("vue-custom-element"),m=(0,d.Uk)("添加全局的资源（指令、过滤器、过渡等），如："),f={href:"https://github.com/vuejs/vue-touch",target:"_blank",rel:"noopener noreferrer"},g=(0,d.Uk)("vue-touch"),b=(0,d.Uk)("通过全局"),_=(0,d._)("code",null,"mixins",-1),k=(0,d.Uk)("添加一些组件选项，如："),V={href:"https://github.com/vuejs/vue-touch",target:"_blank",rel:"noopener noreferrer"},U=(0,d.Uk)("vue-router"),x=(0,d._)("li",null,[(0,d.Uk)("添加Vue实例方法，通过添加到"),(0,d._)("code",null,"Vue.prototype"),(0,d.Uk)("上实现")],-1),y=(0,d.Uk)("一个独立的库，同时有自己的API，又实现以上部分功能，如："),$={href:"https://github.com/vuejs/vue-touch",target:"_blank",rel:"noopener noreferrer"},w=(0,d.Uk)("vue-router"),j=(0,d._)("li",null,[(0,d._)("p",null,[(0,d.Uk)("Vue插件有一个公开的方法"),(0,d._)("code",null,"install"),(0,d.Uk)("，第一个参数是Vue构造器，第二个参数是一个可选对象。")])],-1),E=(0,d._)("li",null,[(0,d._)("p",null,[(0,d.Uk)("插件的使用通过全局方法"),(0,d._)("code",null,"Vue.use(MyPlugin)"),(0,d.Uk)("使用，只会注册一次插件")])],-1),S=(0,d._)("li",null,[(0,d._)("p",null,[(0,d.Uk)("在CommonJS中，应该始终显式的调用"),(0,d._)("code",null,"Vue.use"),(0,d.Uk)("方法")])],-1),C=(0,d.Uk)("社区插件列表"),J={href:"https://github.com/vuejs/awesome-vue#components--libraries",target:"_blank",rel:"noopener noreferrer"},N=(0,d.Uk)("awesome-vue"),M=(0,d.uE)('<h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{{ msg | filter }}\n&lt;div v-bind=“msg | filter&quot;&gt;&lt;/div&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>全局过滤器使用Vue.filter()创建</li><li>局部过滤器使用对象属性filters创建</li><li>过滤器函数总是接收表达式的值作为第一个参数，过滤器可以有多个，值依次向后传递</li><li>过滤器可以接收额外的参数</li></ul><h2 id="构建-部署" tabindex="-1"><a class="header-anchor" href="#构建-部署" aria-hidden="true">#</a> 构建 &amp; 部署</h2>',4),O=(0,d._)("li",null,[(0,d._)("p",null,[(0,d._)("code",null,"<script>"),(0,d.Uk)("标签引入"),(0,d._)("code",null,"[vue.min.js](https://vuejs.org/js/vue.min.js)")])],-1),A=(0,d._)("li",null,[(0,d._)("p",null,[(0,d.Uk)("使用"),(0,d._)("code",null,"vue-cli")]),(0,d._)("ul",null,[(0,d._)("li",null,"webpack + vue-loader"),(0,d._)("li",null,"browserify + vueify"),(0,d._)("li",null,"rollup + rollup-plugin-vue")])],-1),D=(0,d.Uk)("利用钩子函数"),W=(0,d._)("code",null,"Vue.config.errorHandler",-1),B=(0,d.Uk)("定义配置来跟踪运行时错误，可以搭配"),L=(0,d._)("code",null,"[Sentry](https://sentry.io/)",-1),P=(0,d.Uk)("使用（"),X={href:"https://sentry.io/for/vue/",target:"_blank",rel:"noopener noreferrer"},q=(0,d.Uk)("集成配置"),F=(0,d.Uk)("）"),I=(0,d._)("li",null,[(0,d._)("p",null,[(0,d.Uk)("单文件组件（"),(0,d._)("code",null,".vue"),(0,d.Uk)("文件）")])],-1),z={render:function(e,l){const o=(0,d.up)("OutboundLink");return(0,d.wg)(),(0,d.iD)(d.HY,null,[i,t,(0,d._)("ul",null,[n,(0,d._)("li",null,[r,(0,d._)("code",null,"Vue.component(‘componentName',{ props:[‘p1’,’p2’], template: ‘<li>"+(0,c.zw)(e.p1)+"</li>' })",1)]),a]),s,(0,d._)("ul",null,[(0,d._)("li",null,[u,(0,d._)("ul",null,[(0,d._)("li",null,[p,(0,d._)("a",v,[h,(0,d.Wm)(o)])]),(0,d._)("li",null,[m,(0,d._)("a",f,[g,(0,d.Wm)(o)])]),(0,d._)("li",null,[b,_,k,(0,d._)("a",V,[U,(0,d.Wm)(o)])]),x,(0,d._)("li",null,[y,(0,d._)("a",$,[w,(0,d.Wm)(o)])])])]),j,E,S,(0,d._)("li",null,[(0,d._)("p",null,[C,(0,d._)("a",J,[N,(0,d.Wm)(o)])])])]),M,(0,d._)("ul",null,[O,A,(0,d._)("li",null,[(0,d._)("p",null,[D,W,B,L,P,(0,d._)("a",X,[q,(0,d.Wm)(o)]),F])]),I])],64)}}}}]);