"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[697],{1605:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-74baa12e",path:"/articles/Node/%E4%BD%BF%E7%94%A8Express%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8.html",title:"使用 Express 搭建一个简单的服务器",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Express 框架",slug:"express-框架",children:[{level:3,title:"Web 应用程序",slug:"web-应用程序",children:[]},{level:3,title:"API",slug:"api",children:[]},{level:3,title:"性能",slug:"性能",children:[]}]},{level:2,title:"Express-路由基本使用",slug:"express-路由基本使用",children:[{level:3,title:"Hello world",slug:"hello-world",children:[]},{level:3,title:"请求和响应",slug:"请求和响应",children:[]},{level:3,title:"Request 对象",slug:"request-对象",children:[]},{level:3,title:"Response 对象",slug:"response-对象",children:[]}]},{level:2,title:"Express-路由",slug:"express-路由",children:[]},{level:2,title:"Express-搭建静态资源库",slug:"express-搭建静态资源库",children:[]},{level:2,title:"Express-模板引擎之 EJS",slug:"express-模板引擎之-ejs",children:[]}],filePathRelative:"articles/Node/使用Express搭建一个简单的服务器.md",git:{}}},7435:(s,n,a)=>{a.r(n),a.d(n,{default:()=>V});var p=a(6252);const t=(0,p.uE)('<h1 id="使用-express-搭建一个简单的服务器" tabindex="-1"><a class="header-anchor" href="#使用-express-搭建一个简单的服务器" aria-hidden="true">#</a> 使用 Express 搭建一个简单的服务器</h1><h2 id="express-框架" tabindex="-1"><a class="header-anchor" href="#express-框架" aria-hidden="true">#</a> Express 框架</h2><h3 id="web-应用程序" tabindex="-1"><a class="header-anchor" href="#web-应用程序" aria-hidden="true">#</a> Web 应用程序</h3><p>Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能。</p><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><p>使用您所选择的各种 HTTP 实用工具和中间件，快速方便地创建强大的 API。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>Express 提供精简的基本 Web 应用程序功能，而不会隐藏您了解和青睐的 Node.js 功能。</p><h2 id="express-路由基本使用" tabindex="-1"><a class="header-anchor" href="#express-路由基本使用" aria-hidden="true">#</a> Express-路由基本使用</h2><p>下载：<code>npm install express --save</code></p><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello world</h3><p>新建一个<code>server.js</code>文件，然后输入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server is running at http://localhost:8083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后运行：<code>node server.js</code> 打开：http://localhost:8083/ 就出现： <img src="https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-1.png" alt="express-1"></p><h3 id="请求和响应" tabindex="-1"><a class="header-anchor" href="#请求和响应" aria-hidden="true">#</a> 请求和响应</h3><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// --</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>request 和 response 对象的具体介绍：</p><h3 id="request-对象" tabindex="-1"><a class="header-anchor" href="#request-对象" aria-hidden="true">#</a> Request 对象</h3><blockquote><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p></blockquote><ul><li>req.app：当 callback 为外部文件时，用 req.app 访问 express 的实例</li><li>req.baseUrl：获取路由当前安装的 URL 路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和 IP 地址</li><li>req.originalUrl：获取原始请求 URL</li><li>req.params：获取路由的 parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取 URL 的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的 HTTP 请求头</li><li>req.is()：判断请求头 Content-Type 的 MIME 类型</li></ul><h3 id="response-对象" tabindex="-1"><a class="header-anchor" href="#response-对象" aria-hidden="true">#</a> Response 对象</h3><blockquote><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p></blockquote><ul><li>es.app：同 req.app 一样</li><li>res.append()：追加指定 HTTP 头</li><li>res.set()在 res.append()后将重置之前设置的头</li><li>res.cookie(name，value [，option])：设置 Cookie</li><li>opition: domain / expires / httpOnly / maxAge / - path / secure / signed</li><li>res.clearCookie()：清除 Cookie</li><li>res.download()：传送指定路径的文件</li><li>res.get()：返回指定的 HTTP 头</li><li>res.json()：传送 JSON 响应</li><li>res.jsonp()：传送 JSONP 响应</li><li>res.location()：只设置响应的 Location HTTP 头，不设置状态码或者 close response</li><li>res.redirect()：设置响应的 Location HTTP 头，并且设置状态码 302</li><li>res.render(view,[locals],callback)：渲染一个 view，同时向 callback 传递渲染后的字符串，如果在渲染过程中有错误发生 next(err)将会被自动调用。callback 将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li><li>res.send()：传送 HTTP 响应</li><li>res.sendFile(path [，options][，fn])：传送指定路径的文件 -会自动根据文件 extension 设定 Content-Type</li><li>res.set()：设置 HTTP 头，传入 object 可以一次设置多个头</li><li>res.status()：设置 HTTP 状态码</li><li>res.type()：设置 Content-Type 的 MIME 类型</li></ul><h2 id="express-路由" tabindex="-1"><a class="header-anchor" href="#express-路由" aria-hidden="true">#</a> Express-路由</h2><blockquote><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。 在 HTTP 请求中，我们可以通过路由提取出请求的 URL 以及 GET/POST 参数。</p></blockquote><p>路由的基本形式： <code>app.METHOD(PATH, HANDLER)</code></p><ol><li><code>app</code> 表示的是一个 Express 的实例</li><li><code>METHOD</code> 是 http 请求的方法（get, psot..）</li><li><code>PATH</code> 服务器上的路径</li><li><code>HANDLER</code>请求之后的执行函数</li></ol><p>下面的示例说明了如何定义路由：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对/news 页面进行get请求</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello news&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 对/about 页面进行post请求</span>\napp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;about&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello about&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 对/list* 可匹配 /list+任意字符</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/list*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello list pages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',30),e=(0,p.Uk)("然后运行："),o=(0,p._)("code",null,"node server.js",-1),c=(0,p.Uk)(" 打开："),l={href:"http://localhost:8083/",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("http://localhost:8083/"),u=(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-2.png",alt:"express-2"},null,-1),i=(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-3.png",alt:"express-3"},null,-1),k=(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-4.png",alt:"express-4"},null,-1),b=(0,p.uE)('<h2 id="express-搭建静态资源库" tabindex="-1"><a class="header-anchor" href="#express-搭建静态资源库" aria-hidden="true">#</a> Express-搭建静态资源库</h2><blockquote><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。</p></blockquote><p>你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写： <code>app.use(express.static(&#39;public&#39;));</code></p><p>现在，你就可以访问 public 目录中的所有文件了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html\n<span class="token keyword">public</span><span class="token operator">/</span>images\n<span class="token keyword">public</span><span class="token operator">/</span>images<span class="token operator">/</span>bg<span class="token punctuation">.</span>jpeg\n<span class="token keyword">public</span><span class="token operator">/</span>css\n<span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果要使用多个静态资源目录，请多次调用 express.static 中间件函数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;files&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Express 在静态目录查找文件，因此，存放静态文件的目录名不会出现在 URL 中。 但是您可以给静态目录添加一个路由： <code>app.use(&#39;/static&#39;, express.static(path.join(__dirname, &#39;public&#39;)))</code> 设置<code>/static</code>为<code>/public</code>目录的路由。 现在，你就可以通过带有 /static 前缀地址来访问 public 目录中的文件了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>css\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>css<span class="token operator">/</span>index<span class="token punctuation">.</span>css\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>image\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>images<span class="token operator">/</span>bg<span class="token punctuation">.</span>jpeg\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',9),d=(0,p.Uk)("为了安全，最好使用绝对路由： "),m=(0,p._)("code",null,"app.use('/static', express.static(path.join(__dirname, 'public')))",-1),g=(0,p.Uk)(" 然后运行："),h=(0,p._)("code",null,"node server.js",-1),q=(0,p.Uk)(" 打开："),x={href:"http://localhost:8083/static",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("http://localhost:8083/static"),f=(0,p.Uk)(" 就可以访问 public 下的所有文件，如图： "),j=(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-5.png",alt:"express-5"},null,-1),w=(0,p.uE)('<h2 id="express-模板引擎之-ejs" tabindex="-1"><a class="header-anchor" href="#express-模板引擎之-ejs" aria-hidden="true">#</a> Express-模板引擎之 EJS</h2><blockquote><p>EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面。</p></blockquote><p>下载 Ejs: <code>npm install ejs --save</code> 同目录下新建<code>myejs.js</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//设置模板文件的目录,并且新建一个viwes的目录</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;views&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//注册模板引擎</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;view engine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ejs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用res.render()来渲染一个视图并将呈现的HTML字符串发送给客户端；</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&quot;测试&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//监听8083端口</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server is running at http://localhost:8083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在新建 views 目录中新建 index.ejs:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',6),E=(0,p.Uk)("然后运行："),T=(0,p._)("code",null,"node myejs.js",-1),_=(0,p.Uk)(" 打开："),y={href:"http://localhost:8083",target:"_blank",rel:"noopener noreferrer"},H=(0,p.Uk)("http://localhost:8083"),U=(0,p.Uk)(" 即可看到： "),P=(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-6.png",alt:"express-6"},null,-1),S=(0,p.uE)('<p>当然，也可以返回一个 json 文件来渲染视图： 在同目录下新建一个 data.json:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    <span class="token string">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;小明&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;小红&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;4&quot;</span> <span class="token punctuation">,</span><span class="token string">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;小亮&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;5&quot;</span> <span class="token punctuation">,</span><span class="token string">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;source&quot;</span><span class="token operator">:</span><span class="token string">&quot;神奇二班&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后更改 myejs.js:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//设置模板文件的目录,并且新建一个viwes的目录</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;views&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//注册模板引擎</span>\napp<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;view engine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ejs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//使用res.render()来渲染一个视图并将呈现的HTML字符串发送给客户端；</span>\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">getDataJson</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dataJson</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataJson<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span> dataJson<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//访问data.json 拿到数据解析并返回</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getDataJson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callBack</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callBack</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">//监听8083端口</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server is running at http://localhost:8083&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>然后更改 index.ejs:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span>source <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">%</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',6),A=(0,p.Uk)("然后在运行："),N=(0,p._)("br",null,null,-1),J=(0,p.Uk)(" 然后运行："),D=(0,p._)("code",null,"node myejs.js",-1),L=(0,p._)("br",null,null,-1),C=(0,p.Uk)(" 打开："),R={href:"http://localhost:8083/",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("http://localhost:8083"),B=(0,p._)("p",null,[(0,p._)("img",{src:"https://gitee.com/zhangningle/imgs/raw/master/blog/Node/express-7.png",alt:"express-7"})],-1),M=(0,p.Uk)("参考："),O=(0,p._)("br",null,null,-1),z={href:"https://github.com/AnsonZnl/StudyNodeJS/tree/master/demo/expressDemo",target:"_blank",rel:"noopener noreferrer"},I=(0,p.Uk)("GitHub 源码"),F=(0,p._)("br",null,null,-1),G={href:"http://www.expressjs.com.cn/",target:"_blank",rel:"noopener noreferrer"},Y=(0,p.Uk)("Express 官方文档"),Z=(0,p._)("br",null,null,-1),K={href:"https://ejs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},Q=(0,p.Uk)("EJS 模板引擎"),V={render:function(s,n){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,o,c,(0,p._)("a",l,[r,(0,p.Wm)(a)]),u,i,k]),b,(0,p._)("p",null,[d,m,g,h,q,(0,p._)("a",x,[v,(0,p.Wm)(a)]),f,j]),w,(0,p._)("p",null,[E,T,_,(0,p._)("a",y,[H,(0,p.Wm)(a)]),U,P]),S,(0,p._)("p",null,[A,N,J,D,L,C,(0,p._)("a",R,[W,(0,p.Wm)(a)])]),B,(0,p._)("p",null,[M,O,(0,p._)("a",z,[I,(0,p.Wm)(a)]),F,(0,p._)("a",G,[Y,(0,p.Wm)(a)]),Z,(0,p._)("a",K,[Q,(0,p.Wm)(a)])])],64)}}}}]);