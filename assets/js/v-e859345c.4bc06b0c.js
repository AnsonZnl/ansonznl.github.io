"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6602],{7686:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-e859345c",path:"/articles/ReactNative/",title:"React Native",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"RN 解决的问题",slug:"rn-解决的问题",children:[]},{level:2,title:"RN 开发需要注意的地方",slug:"rn-开发需要注意的地方",children:[{level:3,title:"常用的原生组件",slug:"常用的原生组件",children:[]}]},{level:2,title:"布局",slug:"布局",children:[]}],filePathRelative:"articles/ReactNative/README.md",git:{}}},7842:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(6252);const t=(0,p._)("h1",{id:"react-native",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#react-native","aria-hidden":"true"},"#"),(0,p.Uk)(" React Native")],-1),e={href:"https://www.react-native.cn/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("React Native 中文网"),c=(0,p.uE)('<h2 id="rn-解决的问题" tabindex="-1"><a class="header-anchor" href="#rn-解决的问题" aria-hidden="true">#</a> RN 解决的问题</h2><p>特点是一次学习，随处编写。支持WEB、 Android 和 iOS 的原生应用。</p><h2 id="rn-开发需要注意的地方" tabindex="-1"><a class="header-anchor" href="#rn-开发需要注意的地方" aria-hidden="true">#</a> RN 开发需要注意的地方</h2><h3 id="常用的原生组件" tabindex="-1"><a class="header-anchor" href="#常用的原生组件" aria-hidden="true">#</a> 常用的原生组件</h3><p><strong>View</strong>.<br> 和 div 大致是一样的，展示页面的主要组件，支持嵌套。但是不支持点击，可以使用 TouchableOpacity 组件包一下。</p><p><strong>TouchableOpacity</strong> 可以触发点击事件的组件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> TouchableOpacity<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-native&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">onPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>countContainer<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>Count<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>TouchableOpacity\n          style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span>\n          onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onPress<span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n          <span class="token operator">&lt;</span>Text<span class="token operator">&gt;</span>Press Here<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  container<span class="token operator">:</span> <span class="token punctuation">{</span>\n    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    justifyContent<span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span>\n    paddingHorizontal<span class="token operator">:</span> <span class="token number">10</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  button<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alignItems<span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token operator">:</span> <span class="token string">&quot;#DDDDDD&quot;</span><span class="token punctuation">,</span>\n    padding<span class="token operator">:</span> <span class="token number">10</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  countContainer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alignItems<span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span>\n    padding<span class="token operator">:</span> <span class="token number">10</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p><strong>Text</strong> 可以包含文本的组件</p><p><strong>Image</strong> 可以展示图片的元素</p><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><p>最好使用flex+百分比布局，否则可能存在兼容问题。</p><p>React Native 中的 Flexbox 的工作原理和 web 上的 CSS 基本一致，当然也存在少许差异。</p><ul><li>首先是默认值不同：flexDirection的默认值为column（而不是row）</li><li>alignContent默认值为 flex-start（而不是 stretch）</li><li>flexShrink 默认值为0 （而不是1）, 而flex只能指定一个数字值。</li></ul>',13),l={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),c],64)}}}}]);