"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7931],{6815:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4fc0ba82",path:"/articles/Node/MongoDB%E5%AD%A6%E4%B9%A0%E4%B9%8BMongoose%E7%9A%84%E4%BD%BF%E7%94%A8.html",title:"初试 MongoDB 学习之 Mongoose 的使用",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"mongoose 简介",slug:"mongoose-简介",children:[{level:3,title:"为什么要用 Mongoose",slug:"为什么要用-mongoose",children:[]},{level:3,title:"Mongoose 的优势",slug:"mongoose-的优势",children:[]},{level:3,title:"使用 Mongoose",slug:"使用-mongoose",children:[]}]},{level:2,title:"mongoose 基本使用",slug:"mongoose-基本使用",children:[{level:3,title:"mongoose 的几个新的对象",slug:"mongoose-的几个新的对象",children:[]},{level:3,title:"定义一个 Schema（表/ 模式对象）",slug:"定义一个-schema-表-模式对象",children:[]},{level:3,title:"创建 model（集合）",slug:"创建-model-集合",children:[]}]},{level:2,title:"mongoose 插入和查询",slug:"mongoose-插入和查询",children:[{level:3,title:"插入多条数据",slug:"插入多条数据",children:[]},{level:3,title:"查询",slug:"查询",children:[]},{level:3,title:"查询所有",slug:"查询所有",children:[]}]},{level:2,title:"mongoose 修改和删除",slug:"mongoose-修改和删除",children:[{level:3,title:"修改方法：",slug:"修改方法",children:[]},{level:3,title:"删除方法",slug:"删除方法",children:[]},{level:3,title:"统计文档条数",slug:"统计文档条数",children:[]}]},{level:2,title:"Entity",slug:"entity",children:[]}],filePathRelative:"articles/Node/MongoDB学习之Mongoose的使用.md",git:{}}},3654:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="初试-mongodb-学习之-mongoose-的使用" tabindex="-1"><a class="header-anchor" href="#初试-mongodb-学习之-mongoose-的使用" aria-hidden="true">#</a> 初试 MongoDB 学习之 Mongoose 的使用</h1><h2 id="mongoose-简介" tabindex="-1"><a class="header-anchor" href="#mongoose-简介" aria-hidden="true">#</a> mongoose 简介</h2><p>mongoose 官网：https://mongoosejs.com/</p><h3 id="为什么要用-mongoose" tabindex="-1"><a class="header-anchor" href="#为什么要用-mongoose" aria-hidden="true">#</a> 为什么要用 Mongoose</h3><blockquote><p>Mongoose 就是一个让我们可以通过 Node 来操作 MongoDB 的一个模块。 Mongoose 本质是一个对象文档模型（ODM）库， 他对 Node 原生的 MongoDB 模块进行了一部优化封装，并且提供了更多的功能。</p></blockquote><h3 id="mongoose-的优势" tabindex="-1"><a class="header-anchor" href="#mongoose-的优势" aria-hidden="true">#</a> Mongoose 的优势</h3><ol><li>可以像操作对象一样操作数据库</li><li>可以为文档创建一个模式结构（Schema）</li><li>可以对模型中的文档/文档进行验证</li><li>数据可以通过类型转换为对象模型</li><li>可以使用中间件来应用业务逻辑挂钩</li><li>比 Node 原生的 MongoDB 驱动更容易</li></ol><h3 id="使用-mongoose" tabindex="-1"><a class="header-anchor" href="#使用-mongoose" aria-hidden="true">#</a> 使用 Mongoose</h3><ol><li><p>下载安装 mongoose 模块 <code>cnpm install mongoose --save</code></p></li><li><p>引用 mongoose： <code>var mongoose =require(&quot;mongoose&quot;);</code></p></li><li><p>使用&quot;mongoose&quot;连接数据库： <code>var db =mongoose.connect(&quot;mongodb://user:pass@localhost:port/database&quot;);</code></p></li><li><p>执行下面代码检查默认数据库 test，是否可以正常连接成功?</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://localhost/m_data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库连接失败：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库连接成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接已经断开成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="mongoose-基本使用" tabindex="-1"><a class="header-anchor" href="#mongoose-基本使用" aria-hidden="true">#</a> mongoose 基本使用</h2><h3 id="mongoose-的几个新的对象" tabindex="-1"><a class="header-anchor" href="#mongoose-的几个新的对象" aria-hidden="true">#</a> mongoose 的几个新的对象</h3><p>在 MongoDB 中，多个 Document 可以组成 Collection(以下简称集合)，多个集合又可以组成数据库。我们想要操作 MongoDB 数据，那就得先要具备上面所说的包含数据的“文档”，文档又是什么意思呢，请看如下介绍。</p><ol><li><strong>文档</strong> —— 是 MongoDB 的核心概念，是键值对的一个有序集，在 JavaScript 里文档被表示成对象。同时它也是 MongoDB 中数据的基本单元，非常类似于关系型数据库管理系统中的行，但更具表现力。</li><li><strong>集合</strong> —— 由一组文档组成，如果将 MongoDB 中的一个文档比喻成关系型数据库中的一行，那么一个集合就相当于一张表。</li><li><strong>Schema</strong>—— 一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力，仅仅只是<strong>定义数据的类型</strong>，可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架。 <strong>mongoose 中任何任何事物都是从 Schema 开始的</strong>。每一个 Schema 对应 MongoDB 中的一个集合(collection)。Schema 中定义了集合中文档(document)的样式。</li></ol><h3 id="定义一个-schema-表-模式对象" tabindex="-1"><a class="header-anchor" href="#定义一个-schema-表-模式对象" aria-hidden="true">#</a> 定义一个 Schema（表/ 模式对象）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//新建Schema 定义规则/字段的规则</span>\n<span class="token keyword">let</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>\n<span class="token comment">//定义personSchema的字段（规则）需要new一下 有点像构造函数的样子</span>\n<span class="token keyword">let</span> personSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  age<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>基本属性类型有</strong>：</p><ul><li>String</li><li>Number</li><li>Date</li><li>Boolean</li><li>Buffer</li><li>ObjectId</li><li>Mixed</li><li>Array</li></ul><p><strong>Model</strong>—— 由 Schema 构造生成的模型，根据 Schema 定义的数据类型规则，可操作具体的符合改规则的数据。</p><h3 id="创建-model-集合" tabindex="-1"><a class="header-anchor" href="#创建-model-集合" aria-hidden="true">#</a> 创建 model（集合）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> personModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span> personSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>person：数据库中的集合名称,当我们对其添加数据时如果 person 已经存在，则会保存到其目录下，如果未存在，则会创建 person 集合，然后在保存数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//4. 插入文档</span>\npersonModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;张宁乐&quot;</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;插入成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="mongoose-插入和查询" tabindex="-1"><a class="header-anchor" href="#mongoose-插入和查询" aria-hidden="true">#</a> mongoose 插入和查询</h2><p>mongoose 查找数据的一些方法： https://mongoosejs.com/docs/api.html#model_Model.find</p><h3 id="插入多条数据" tabindex="-1"><a class="header-anchor" href="#插入多条数据" aria-hidden="true">#</a> 插入多条数据</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;张逗逗&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;牛嘻嘻&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">&quot;女&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;插入成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><ul><li>Model.find()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;张宁乐&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="查询所有" tabindex="-1"><a class="header-anchor" href="#查询所有" aria-hidden="true">#</a> 查询所有</h3><ul><li>Model.find({}, callback)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>也可以选择查找数据的条件（0 隐藏 1 显示 id 默认显示） 和 MongoDB 在命令行中的使用方法一样</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//查询时只显示name</span>\npersonModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在<code>find()</code>中 <code>skip</code>（查询开始的位置）和<code>limit</code>（增加的条数）也可以使用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> skip<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">//只显示name 和 age   从第1开始 每次查询2条</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>MongoDB 的 find()、findOne() 等命令在 mongoose 里都可以使用</strong> 具体可参考 ：https://mongoosejs.com/docs/api.html#model_Model.find</p><h2 id="mongoose-修改和删除" tabindex="-1"><a class="header-anchor" href="#mongoose-修改和删除" aria-hidden="true">#</a> mongoose 修改和删除</h2><p>参考： https://mongoosejs.com/docs/api.html#model_Model.update</p><h3 id="修改方法" tabindex="-1"><a class="header-anchor" href="#修改方法" aria-hidden="true">#</a> 修改方法：</h3><ul><li>Model.update()</li><li>Model.updateMany()</li><li>Model.updateOne()</li><li>Model.watch()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;张宁乐&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> $set<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://gitee.com/zhangningle/imgs/raw/master/blog/Node/mongo-3.png" alt="mongo-3"></p><h3 id="删除方法" tabindex="-1"><a class="header-anchor" href="#删除方法" aria-hidden="true">#</a> 删除方法</h3><ul><li>Model.remove()</li><li>Model.deleteMany()</li><li>Model.deleteOne()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;牛嘻嘻&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="统计文档条数" tabindex="-1"><a class="header-anchor" href="#统计文档条数" aria-hidden="true">#</a> 统计文档条数</h3><ul><li>Model.count()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>personModel<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询条数成功！ 一共：&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;条&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="https://gitee.com/zhangningle/imgs/raw/master/blog/Node/mongo-5.png" alt="mongo-4"></p><h2 id="entity" tabindex="-1"><a class="header-anchor" href="#entity" aria-hidden="true">#</a> Entity</h2><p>Entity—— 由 Model 创建的实体，使用 save 方法保存数据，Model 和 Entity 的操作都能影响数据库的操作，但 Model 比 Entity 更具操作性。 使用 Model 创建 Entity，如下示例:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://localhost/m_data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>\n<span class="token keyword">let</span> personSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> String<span class="token punctuation">,</span>\n  age<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> personModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span> personSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> personEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">personModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;许巍&quot;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npersonEntity<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> person</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;保存成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;保存失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="https://gitee.com/zhangningle/imgs/raw/master/blog/Node/mongo-5.png" alt="mongo-5"></p><p>参考：https://blog.csdn.net/swimming_in_IT_/article/details/80723866</p>',56),t={render:function(n,s){return p}}}}]);