"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[716],{1863:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4a18d8c4",path:"/articles/Browser/%E4%BD%BF%E7%94%A8%E8%BF%87WebWorker%E8%A7%A3%E5%86%B3%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%8D%E5%87%86%E7%A1%AE%E7%9A%84%E9%97%AE%E9%A2%98.html",title:"使用过 WebWorker 解决定时器不准确的问题",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"articles/Browser/使用过WebWorker解决定时器不准确的问题.md",git:{}}},6734:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(6252);const t=(0,p.uE)('<h1 id="使用过-webworker-解决定时器不准确的问题" tabindex="-1"><a class="header-anchor" href="#使用过-webworker-解决定时器不准确的问题" aria-hidden="true">#</a> 使用过 WebWorker 解决定时器不准确的问题</h1><p>在使用定时器的时候，因为 JS 单线程的原因，经常会导致定时器不准确的问题发生，尤其是在 tab 页切换时尤为明显。</p><p>web worker 可以为我们提供一个线程去执行我们额外的功能（当然也有一些限制，不可以使用 window、DOM 等对象），我们可以使用 web worker 里面运行一个不受其他同步任务干扰的定时器，在到达时间后通知主线程即可。</p><p>worker 代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">WorkerCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> _self <span class="token operator">=</span> self<span class="token punctuation">;</span>\n    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        _self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> time<span class="token operator">:</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 把脚本代码转为string</span>\n<span class="token keyword">let</span> code <span class="token operator">=</span> WorkerCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将代码块取出</span>\ncode <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 转为二进制Blob文件</span>\n<span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;application/javascript&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 生成临时地址</span>\n<span class="token keyword">const</span> worker_script <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> worker_script<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>主线程代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> intervalWorker <span class="token keyword">from</span> <span class="token string">&quot;./intervalWorker&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 新建worker</span>\n<span class="token keyword">const</span> workerInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>intervalWorker<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nworkerInstance<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在 worker通知后执行函数</span>\n    <span class="token function">fetchList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在组件卸载后关闭</span>\n    workerInstance<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',8),e={href:"http://www.ruanyifeng.com/blog/2018/07/web-worker.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("阮一峰-Web Worker 使用教程"),c={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Using_web_workers - MDN"),r={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),(0,p._)("li",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)])])])],64)}}}}]);